// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package helloworld

import (
	proto "github.com/golang/protobuf/proto"
	go_atomos "github.com/hwangtou/go-atomos"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.

// GreeterCallable is the callable API for Greeter atomos.
//
type GreeterCallable interface {
	go_atomos.Callable
	// Sends a greeting
	SayHello(in *HelloRequest) (*HelloReply, error)
}

type greeterCallable struct {
	world go_atomos.CosmosNode
	name  string
}

func GetGreeterCallable(c go_atomos.CosmosNode, name string) (GreeterCallable, error) {
	ca, err := c.GetAtomCallable(&GreeterDesc, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(GreeterCallable); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrCustomizeAtomType
	}
}

func (c *greeterCallable) SayHello(in *HelloRequest) (*HelloReply, error) {
	r, err := c.world.CallAtom(GreeterDesc.Name, c.name, "SayHello", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*HelloReply)
	if !ok {
		return nil, go_atomos.ErrAtomCallNotExists
	}
	return reply, nil
}

func (c *greeterCallable) Close() error {
	return c.world.CloseAtom(GreeterDesc.Name, c.name)
}

// GreeterAtom is the atomos API for Greeter atomos.
//
type GreeterAtom interface {
	go_atomos.Atom
	// Sends a greeting
	SayHello(in *HelloRequest) (*HelloReply, error)
}

func SpawnGreeterAtom(c *go_atomos.Cosmos, name string, atom GreeterAtom) (GreeterCallable, error) {
	ca, err := c.SpawnAtom(&GreeterDesc, name, atom)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(GreeterCallable); ok {
		return c, nil
	}
	return nil, go_atomos.ErrCustomizeAtomType
}

var GreeterDesc go_atomos.AtomTypeDesc = go_atomos.AtomTypeDesc{
	Name: "helloworld.Greeter",
	NewCallable: func(c go_atomos.CosmosNode, name string) go_atomos.Callable {
		return &greeterCallable{c, name}
	},
	Calls: []go_atomos.CallDesc{
		{
			Name: "SayHello",
			Func: func(atom go_atomos.Atom, in proto.Message) (proto.Message, error) {
				req, ok := in.(*HelloRequest)
				if !ok {
					return nil, go_atomos.ErrAtomTypeNotExists
				}
				a, ok := atom.(GreeterAtom)
				if !ok {
					return nil, go_atomos.ErrAtomTypeNotExists
				}
				return a.SayHello(req)
			},
			ArgDec: func(buf []byte) (proto.Message, error) {
				r := &HelloRequest{}
				return r, proto.Unmarshal(buf, r)
			},
			ReplyDec: func(buf []byte) (proto.Message, error) {
				r := &HelloReply{}
				return r, proto.Unmarshal(buf, r)
			},
		},
	},
}
