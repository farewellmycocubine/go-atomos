syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

package api;

message AuctionHouse {
  map<string, Auction> auctions = 1;
  map<string, Bidder> bidders = 2;
}

message Auction {
  string id = 1;
  string name = 2;
  State state = 3;
  int32 reserved_price = 4;
  int32 buy_now_price = 5;
  int32 each_bin_min = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp bidding_at = 8;
  google.protobuf.Timestamp end_at = 9;
  bool bid_now = 10;
  Bid last_bid = 11;
  repeated Bid bid_log = 12;
}

message Bid {
  string id = 1;
  string name = 2;
  int32 price = 3;
  google.protobuf.Timestamp bid_at = 4;
}

message Bidder {
  string id = 1;
  string name = 2;
  int32 balance = 3;
}

enum State {
  New = 0;
  Bidding = 1;
  End = 2;
}

// Atomos: AuctionHouse

service AtomAuctionHouse {
  rpc NewAuction (NewAuctionReq) returns (NewAuctionResp) {}
  rpc WatchAuctions (WatchAuctionsReq) returns (WatchAuctionsResp) {}
  rpc UpdateAuction (AuctionUpdate) returns (google.protobuf.Empty) {}
}

message NewAuctionReq {
  Auction auction = 1;
}
message NewAuctionResp {
  Code code = 1;
  string reason = 2;
  Auction auction = 3;
}

message WatchAuctionsReq {
  Bidder bid = 1;
}
message WatchAuctionsResp {
  repeated Auction list = 1;
}

// Atomos: Auction

service AtomAuction {
  rpc UpdateBidderWatcher (BidderWatcher) returns (google.protobuf.Empty) {}
  rpc Bid (BidReq) returns (BidResp) {}
}

message BidderWatcher {
  bool watch = 1;
}

message BidReq {
  Bidder bidder = 1;
  bool bid_now = 2;
  int32 bid_price = 3;
}
message BidResp {
  bool success = 1;
  int32 real_price = 2;
}

message NextState {
  State next = 1;
}

// Atomos: Bidder

service AtomBidder {
  rpc UpdateAuction (AuctionUpdate) returns (Resp) {}
}

enum UpdateType {
  NewBid = 0;
  BidBegin = 1;
  BidNew = 2;
  BuyNow = 3;
  BidEnd = 4;
}

message AuctionUpdate {
  UpdateType type = 1;
  Auction auction = 2;
}

enum Code {
  OK = 0;
}

message Resp {
}
