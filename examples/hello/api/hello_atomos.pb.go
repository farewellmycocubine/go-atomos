// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//////
//// INTERFACES
//

////////////////////////////////////
////////// Element: Hello //////////
////////////////////////////////////
//
// The greeting service definition.
// New line
//

const HelloName = "Hello"

// HelloId is the interface of Hello element.

type HelloElementID interface {
	atomos.ID

	// Sends a greeting
	SayHello(from atomos.ID, in *HelloReq) (*HelloResp, *atomos.ErrorInfo)
}

func GetHelloElementID(c atomos.CosmosNode) (HelloElementID, *atomos.ErrorInfo) {
	ca, err := c.GetElementId(HelloName)
	if err != nil {
		return nil, err
	}
	return &helloElementID{ca}, nil
}

// HelloAtomID is the interface of Hello atom.

type HelloAtomID interface {
	atomos.ID

	// Sends a greeting
	SayHello(from atomos.ID, in *HelloReq) (*HelloResp, *atomos.ErrorInfo)

	// Build net
	BuildNet(from atomos.ID, in *BuildNetReq) (*BuildNetResp, *atomos.ErrorInfo)
}

func GetHelloAtomID(c atomos.CosmosNode, name string) (HelloAtomID, *atomos.ErrorInfo) {
	ca, err := c.GetElementAtomId(HelloName, name)
	if err != nil {
		return nil, err
	}
	return &helloAtomID{ca}, nil
}

// Hello is the atomos implements of Hello element.

type HelloElement interface {
	atomos.Atomos
	Spawn(self atomos.ElementSelfID, data *HelloData) *atomos.ErrorInfo
	SayHello(from atomos.ID, in *HelloReq) (*HelloResp, *atomos.ErrorInfo)
}

// Hello is the atomos implements of Hello atom.

type HelloAtom interface {
	atomos.Atomos
	Spawn(self atomos.AtomSelfID, arg *HelloSpawnArg, data *HelloData) *atomos.ErrorInfo
	SayHello(from atomos.ID, in *HelloReq) (*HelloResp, *atomos.ErrorInfo)
	BuildNet(from atomos.ID, in *BuildNetReq) (*BuildNetResp, *atomos.ErrorInfo)
}

func SpawnHelloAtom(c atomos.CosmosNode, name string, arg *HelloSpawnArg) (HelloAtomID, *atomos.ErrorInfo) {
	id, err := c.SpawnElementAtom(HelloName, name, arg)
	if err != nil {
		return nil, err
	}
	return &helloAtomID{id}, nil
}

//////
//// IMPLEMENTATIONS
//

////////////////////////////////////
////////// Element: Hello //////////
////////////////////////////////////

type helloElementID struct {
	atomos.ID
}

func (c *helloElementID) SayHello(from atomos.ID, in *HelloReq) (*HelloResp, *atomos.ErrorInfo) {
	// TODO
	r, err := c.Cosmos().MessageElement(from, c, "SayHello", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*HelloResp)
	if !ok {
		return nil, atomos.NewErrorf(atomos.ErrAtomMessageReplyType, "Reply type=(%T)", r)
	}
	return reply, nil
}

//
// The greeting service definition.
// New line
//

type helloAtomID struct {
	atomos.ID
}

func (c *helloAtomID) SayHello(from atomos.ID, in *HelloReq) (*HelloResp, *atomos.ErrorInfo) {
	r, err := c.Cosmos().MessageAtom(from, c, "SayHello", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*HelloResp)
	if !ok {
		return nil, atomos.NewErrorf(atomos.ErrAtomMessageReplyType, "Reply type=(%T)", r)
	}
	return reply, nil
}

func (c *helloAtomID) BuildNet(from atomos.ID, in *BuildNetReq) (*BuildNetResp, *atomos.ErrorInfo) {
	r, err := c.Cosmos().MessageAtom(from, c, "BuildNet", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*BuildNetResp)
	if !ok {
		return nil, atomos.NewErrorf(atomos.ErrAtomMessageReplyType, "Reply type=(%T)", r)
	}
	return reply, nil
}

func GetHelloInterface(dev atomos.ElementDeveloper) *atomos.ElementInterface {
	elem := atomos.NewInterfaceFromDeveloper(HelloName, dev)
	elem.ElementSpawner = func(s atomos.ElementSelfID, a atomos.Atomos, data proto.Message) *atomos.ErrorInfo {
		dataT, _ := data.(*HelloData)
		elem, ok := a.(HelloElement)
		if !ok {
			return atomos.NewErrorf(atomos.ErrElementNotImplemented, "Element not implemented, type=(HelloElement)")
		}
		return elem.Spawn(s, dataT)
	}
	elem.AtomSpawner = func(s atomos.AtomSelfID, a atomos.Atomos, arg, data proto.Message) *atomos.ErrorInfo {
		argT, _ := arg.(*HelloSpawnArg)
		dataT, _ := data.(*HelloData)
		atom, ok := a.(HelloAtom)
		if !ok {
			return atomos.NewErrorf(atomos.ErrAtomNotImplemented, "Atom not implemented, type=(HelloAtom)")
		}
		return atom.Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*atomos.AtomMessageConfig{
		"SayHello": atomos.NewAtomCallConfig(&HelloReq{}, &HelloResp{}),
		"BuildNet": atomos.NewAtomCallConfig(&BuildNetReq{}, &BuildNetResp{}),
	}
	elem.ElementMessages = map[string]*atomos.ElementAtomMessage{
		"SayHello": {
			InDec:  func(b []byte) (proto.Message, error) { return atomos.MessageUnmarshal(b, &HelloReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return atomos.MessageUnmarshal(b, &HelloResp{}) },
		},
	}
	elem.AtomMessages = map[string]*atomos.ElementAtomMessage{
		"SayHello": {
			InDec:  func(b []byte) (proto.Message, error) { return atomos.MessageUnmarshal(b, &HelloReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return atomos.MessageUnmarshal(b, &HelloResp{}) },
		},
		"BuildNet": {
			InDec:  func(b []byte) (proto.Message, error) { return atomos.MessageUnmarshal(b, &BuildNetReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return atomos.MessageUnmarshal(b, &BuildNetResp{}) },
		},
	}
	return elem
}

func GetHelloImplement(dev atomos.ElementDeveloper) *atomos.ElementImplementation {
	elem := atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetHelloInterface(dev)
	elem.ElementHandlers = map[string]atomos.MessageHandler{
		"SayHello": func(from atomos.ID, to atomos.Atomos, in proto.Message) (proto.Message, *atomos.ErrorInfo) {
			req, ok := in.(*HelloReq)
			if !ok {
				return nil, atomos.NewErrorf(atomos.ErrAtomMessageArgType, "Arg type=(%T)", in)
			}
			a, ok := to.(HelloElement)
			if !ok {
				return nil, atomos.NewErrorf(atomos.ErrAtomMessageAtomType, "Atom type=(%T)", to)
			}
			return a.SayHello(from, req)
		},
	}
	elem.AtomHandlers = map[string]atomos.MessageHandler{
		"SayHello": func(from atomos.ID, to atomos.Atomos, in proto.Message) (proto.Message, *atomos.ErrorInfo) {
			req, ok := in.(*HelloReq)
			if !ok {
				return nil, atomos.NewErrorf(atomos.ErrAtomMessageArgType, "Arg type=(%T)", in)
			}
			a, ok := to.(HelloAtom)
			if !ok {
				return nil, atomos.NewErrorf(atomos.ErrAtomMessageAtomType, "Atom type=(%T)", to)
			}
			return a.SayHello(from, req)
		},
		"BuildNet": func(from atomos.ID, to atomos.Atomos, in proto.Message) (proto.Message, *atomos.ErrorInfo) {
			req, ok := in.(*BuildNetReq)
			if !ok {
				return nil, atomos.NewErrorf(atomos.ErrAtomMessageArgType, "Arg type=(%T)", in)
			}
			a, ok := to.(HelloAtom)
			if !ok {
				return nil, atomos.NewErrorf(atomos.ErrAtomMessageAtomType, "Atom type=(%T)", to)
			}
			return a.BuildNet(from, req)
		},
	}
	return elem
}
