// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	go_atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//////
//// INTERFACES
//

////////////////////////////////////
////////// Element: Hello //////////
////////////////////////////////////
//
// The greeting service definition.
// New line
//

const HelloName = "Hello"

// HelloId is the interface of Hello atomos.

type HelloId interface {
	go_atomos.Id

	// Sends a greeting
	SayHello(from go_atomos.Id, in *HelloReq) (*HelloResp, error)

	// Build net
	BuildNet(from go_atomos.Id, in *BuildNetReq) (*BuildNetResp, error)
}

func GetHelloId(c go_atomos.CosmosNode, name string) (HelloId, error) {
	ca, err := c.GetAtomId(HelloName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(HelloId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// Hello is the atomos implements of Hello atomos.

type Hello interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *HelloSpawnArg, data *HelloData) error
	SayHello(from go_atomos.Id, in *HelloReq) (*HelloResp, error)
	BuildNet(from go_atomos.Id, in *BuildNetReq) (*BuildNetResp, error)
}

func SpawnHello(c go_atomos.CosmosNode, name string, arg *HelloSpawnArg) (HelloId, error) {
	_, err := c.SpawnAtom(HelloName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(HelloName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(HelloId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

//////
//// IMPLEMENTATIONS
//

////////////////////////////////////
////////// Element: Hello //////////
////////////////////////////////////
//
// The greeting service definition.
// New line
//

type helloId struct {
	go_atomos.Id
}

func (c *helloId) SayHello(from go_atomos.Id, in *HelloReq) (*HelloResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "SayHello", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*HelloResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *helloId) BuildNet(from go_atomos.Id, in *BuildNetReq) (*BuildNetResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "BuildNet", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*BuildNetResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetHelloInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(HelloName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &helloId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*HelloSpawnArg)
		dataT, _ := data.(*HelloData)
		return a.(Hello).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"SayHello": go_atomos.NewAtomCallConfig(&HelloReq{}, &HelloResp{}),
		"BuildNet": go_atomos.NewAtomCallConfig(&BuildNetReq{}, &BuildNetResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"SayHello": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &HelloReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &HelloResp{}) },
		},
		"BuildNet": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &BuildNetReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &BuildNetResp{}) },
		},
	}
	return elem
}

func GetHelloImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetHelloInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"SayHello": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*HelloReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(Hello)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.SayHello(from, req)
		},
		"BuildNet": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*BuildNetReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(Hello)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.BuildNet(from, req)
		},
	}
	return elem
}
