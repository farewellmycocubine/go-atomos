// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	go_atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

const HelloAtomosName = "HelloAtomos"

////////////////////////////////////
/////////// 需要实现的接口 ///////////
////// Interface to implement //////
////////////////////////////////////

// HelloAtomosElement is the atomos implements of HelloAtomos element.

type HelloAtomosElement interface {
	go_atomos.Atomos
	// Element的创建（自旋）方法
	// Element creation (spin) method
	// 与别不同的是，rpc的input参数表示Spawn时传入的参数，rpc的output参数表示Spawn时传入的数据（需要支持自动持久化）。
	Spawn(self go_atomos.ElementSelfID, data *HAEData) *go_atomos.Error

	// 向Element发送SayHello消息
	// Send SayHello message to Element
	// I = Input
	// O = Output
	SayHello(from go_atomos.ID, in *HAEHelloI) (out *HAEHelloO, err *go_atomos.Error)
	// Atomos Special Implements
	// Atomos的特殊实现
	//
	// 支持广播通知（类似MQ机制）
	Broadcast(from go_atomos.ID, in *go_atomos.ElementBroadcastI) (out *go_atomos.ElementBroadcastO, err *go_atomos.Error)

	// Scale Methods

	// 向负载均衡的ID发送Bonjour消息
	// Send Bonjour message to the ID of the load balancer
	// HA = HelloAtomosAtom
	ScaleBonjour(from go_atomos.ID, in *HABonjourI) (*HelloAtomosAtomID, *go_atomos.Error)
}

// HelloAtomosAtom is the atomos implements of HelloAtomos atom.

type HelloAtomosAtom interface {
	go_atomos.Atomos

	// Spawn
	// Atom的创建（自旋）方法
	// Atom creation (spin) method
	// 与别不同的是，rpc的input参数表示Spawn时传入的参数，rpc的output参数表示Spawn时传入的数据（需要支持自动持久化）。
	Spawn(self go_atomos.AtomSelfID, arg *HASpawnArg, data *HAData) *go_atomos.Error

	// 向Atom发送Greeting消息
	// Send Greeting message to Atom
	Greeting(from go_atomos.ID, in *HAGreetingI) (out *HAGreetingO, err *go_atomos.Error)

	// Scale Methods

	// 向负载均衡的ID发送Bonjour消息
	// Send Bonjour message to the ID of the load balancer
	// HA = HelloAtomosAtom
	ScaleBonjour(from go_atomos.ID, in *HABonjourI) (out *HABonjourO, err *go_atomos.Error)
}

////////////////////////////////////
/////////////// 识别符 //////////////
//////////////// ID ////////////////
////////////////////////////////////

// Element: HelloAtomos

type HelloAtomosElementID struct {
	go_atomos.ID
	*go_atomos.IDTracker
}

// 获取某节点中的ElementID
// Get element id of node
func GetHelloAtomosElementID(c go_atomos.CosmosNode) (*HelloAtomosElementID, *go_atomos.Error) {
	ca, err := c.CosmosGetElementID(HelloAtomosName)
	if err != nil {
		return nil, err
	}
	return &HelloAtomosElementID{ca, nil}, nil
}

// 向Element发送SayHello消息
// Send SayHello message to Element
// I = Input
// O = Output
// Sync
func (c *HelloAtomosElementID) SayHello(callerID go_atomos.SelfID, in *HAEHelloI, ext ...interface{}) (out *HAEHelloO, err *go_atomos.Error) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosElementValue.SayHello }
	return helloAtomosElementMessengerValue.SayHello().SyncElement(c, callerID, in, ext...)
}

// Async
func (c *HelloAtomosElementID) AsyncSayHello(callerID go_atomos.SelfID, in *HAEHelloI, callback func(out *HAEHelloO, err *go_atomos.Error), ext ...interface{}) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosElementValue.SayHello }
	helloAtomosElementMessengerValue.SayHello().AsyncElement(c, callerID, in, callback, ext...)
}

// Atomos Special Implements
// Atomos的特殊实现
//
// 支持广播通知（类似MQ机制）
// Sync
func (c *HelloAtomosElementID) Broadcast(callerID go_atomos.SelfID, in *go_atomos.ElementBroadcastI, ext ...interface{}) (out *go_atomos.ElementBroadcastO, err *go_atomos.Error) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosElementValue.Broadcast }
	return helloAtomosElementMessengerValue.Broadcast().SyncElement(c, callerID, in, ext...)
}

// Async
func (c *HelloAtomosElementID) AsyncBroadcast(callerID go_atomos.SelfID, in *go_atomos.ElementBroadcastI, callback func(out *go_atomos.ElementBroadcastO, err *go_atomos.Error), ext ...interface{}) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosElementValue.Broadcast }
	helloAtomosElementMessengerValue.Broadcast().AsyncElement(c, callerID, in, callback, ext...)
}

// GetID
func (c *HelloAtomosElementID) ScaleBonjourGetID(callerID go_atomos.SelfID, in *HABonjourI, ext ...interface{}) (id *HelloAtomosAtomID, err *go_atomos.Error) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosElementValue.ScaleBonjour }
	i, tracker, err := helloAtomosElementMessengerValue.ScaleBonjour().GetScaleID(c, callerID, HelloAtomosName, in, ext...)
	if err != nil {
		return nil, err.AddStack(nil)
	}
	return &HelloAtomosAtomID{i, tracker}, nil
}

// Sync
func (c *HelloAtomosElementID) ScaleBonjour(callerID go_atomos.SelfID, in *HABonjourI, ext ...interface{}) (out *HABonjourO, err *go_atomos.Error) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosElementValue.ScaleBonjour }
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosAtomValue.ScaleBonjour }
	id, err := c.ScaleBonjourGetID(callerID, in, ext...)
	if err != nil {
		return nil, err.AddStack(nil)
	}
	defer id.Release()
	return helloAtomosAtomMessengerValue.ScaleBonjour().SyncAtom(id, callerID, in)
}

// Async
func (c *HelloAtomosElementID) ScaleAsyncBonjour(callerID go_atomos.SelfID, in *HABonjourI, callback func(*HABonjourO, *go_atomos.Error), ext ...interface{}) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosElementValue.ScaleBonjour }
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosAtomValue.ScaleBonjour }
	id, err := c.ScaleBonjourGetID(callerID, in, ext...)
	if err != nil {
		callback(nil, err.AddStack(nil))
		return
	}
	defer id.Release()
	helloAtomosAtomMessengerValue.ScaleBonjour().AsyncAtom(id, callerID, in, callback, ext...)
}

// Atom: HelloAtomos

type HelloAtomosAtomID struct {
	go_atomos.ID
	*go_atomos.IDTracker
}

// 创建（自旋）某节点中的一个Atom，并返回AtomID
// Create (spin) an atom in a node and return the AtomID
func SpawnHelloAtomosAtom(caller go_atomos.SelfID, c go_atomos.CosmosNode, name string, arg *HASpawnArg) (*HelloAtomosAtomID, *go_atomos.Error) {
	id, tracker, err := c.CosmosSpawnAtom(caller, HelloAtomosName, name, arg)
	if id == nil {
		return nil, err.AddStack(nil)
	}
	return &HelloAtomosAtomID{id, tracker}, err
}

// 获取某节点中的AtomID
// Get atom id of node
func GetHelloAtomosAtomID(c go_atomos.CosmosNode, name string) (*HelloAtomosAtomID, *go_atomos.Error) {
	ca, tracker, err := c.CosmosGetAtomID(HelloAtomosName, name)
	if err != nil {
		return nil, err
	}
	return &HelloAtomosAtomID{ca, tracker}, nil
}

// Sync
func (c *HelloAtomosAtomID) ScaleBonjour(callerID go_atomos.SelfID, in *HABonjourI, ext ...interface{}) (out *HABonjourO, err *go_atomos.Error) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosAtomValue.ScaleBonjour }
	return helloAtomosAtomMessengerValue.ScaleBonjour().SyncAtom(c, callerID, in, ext...)
}

// Async
func (c *HelloAtomosAtomID) AsyncScaleBonjour(callerID go_atomos.SelfID, in *HABonjourI, callback func(out *HABonjourO, err *go_atomos.Error), ext ...interface{}) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosAtomValue.ScaleBonjour }
	helloAtomosAtomMessengerValue.ScaleBonjour().AsyncAtom(c, callerID, in, callback, ext...)
}

// Sync
func (c *HelloAtomosAtomID) Greeting(callerID go_atomos.SelfID, in *HAGreetingI, ext ...interface{}) (out *HAGreetingO, err *go_atomos.Error) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosAtomValue.Greeting }
	return helloAtomosAtomMessengerValue.Greeting().SyncAtom(c, callerID, in, ext...)
}

// Async
func (c *HelloAtomosAtomID) AsyncGreeting(callerID go_atomos.SelfID, in *HAGreetingI, callback func(out *HAGreetingO, err *go_atomos.Error), ext ...interface{}) {
	/* CODE JUMPER 代码跳转 */ _ = func() { _ = helloAtomosAtomValue.Greeting }
	helloAtomosAtomMessengerValue.Greeting().AsyncAtom(c, callerID, in, callback, ext...)
}

// Atomos Interface

func GetHelloAtomosImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetHelloAtomosInterface(dev)
	elem.ElementHandlers = map[string]go_atomos.MessageHandler{
		"SayHello": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloAtomosElementMessengerValue.SayHello().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.SayHello(from, i)
		},
		"Broadcast": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloAtomosElementMessengerValue.Broadcast().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.Broadcast(from, i)
		},
	}
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"ScaleBonjour": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloAtomosAtomMessengerValue.ScaleBonjour().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.ScaleBonjour(from, i)
		},
		"Greeting": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloAtomosAtomMessengerValue.Greeting().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.Greeting(from, i)
		},
	}
	elem.ScaleHandlers = map[string]go_atomos.ScaleHandler{
		"ScaleBonjour": func(from go_atomos.ID, e go_atomos.Atomos, message string, in proto.Message) (id go_atomos.ID, err *go_atomos.Error) {
			a, i, err := helloAtomosElementMessengerValue.ScaleBonjour().ExecuteScale(e, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.ScaleBonjour(from, i)
		},
	}
	return elem
}
func GetHelloAtomosInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(HelloAtomosName, dev)
	elem.ElementSpawner = func(s go_atomos.ElementSelfID, a go_atomos.Atomos, data proto.Message) *go_atomos.Error {
		dataT, _ := data.(*HAEData)
		elem, ok := a.(HelloAtomosElement)
		if !ok {
			return go_atomos.NewErrorf(go_atomos.ErrElementNotImplemented, "Element not implemented, type=(HelloAtomosElement)")
		}
		return elem.Spawn(s, dataT)
	}
	elem.AtomSpawner = func(s go_atomos.AtomSelfID, a go_atomos.Atomos, arg, data proto.Message) *go_atomos.Error {
		argT, _ := arg.(*HASpawnArg)
		dataT, _ := data.(*HAData)
		atom, ok := a.(HelloAtomosAtom)
		if !ok {
			return go_atomos.NewErrorf(go_atomos.ErrAtomNotImplemented, "Atom not implemented, type=(HelloAtomosAtom)")
		}
		return atom.Spawn(s, argT, dataT)
	}
	elem.ElementDecoders = map[string]*go_atomos.IOMessageDecoder{
		"SayHello":     helloAtomosElementMessengerValue.SayHello().Decoder(&HAEHelloI{}, &HAEHelloO{}),
		"Broadcast":    helloAtomosElementMessengerValue.Broadcast().Decoder(&go_atomos.ElementBroadcastI{}, &go_atomos.ElementBroadcastO{}),
		"ScaleBonjour": helloAtomosElementMessengerValue.ScaleBonjour().Decoder(&HABonjourI{}, &HABonjourO{}),
	}
	elem.AtomDecoders = map[string]*go_atomos.IOMessageDecoder{
		"ScaleBonjour": helloAtomosAtomMessengerValue.ScaleBonjour().Decoder(&HABonjourI{}, &HABonjourO{}),
		"Greeting":     helloAtomosAtomMessengerValue.Greeting().Decoder(&HAGreetingI{}, &HAGreetingO{}),
	}
	return elem
}

// Atomos Internal

// Element Define

type helloAtomosElementMessenger struct{}

func (m helloAtomosElementMessenger) SayHello() go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosElement, *HAEHelloI, *HAEHelloO] {
	return go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosElement, *HAEHelloI, *HAEHelloO]{nil, nil, "SayHello"}
}
func (m helloAtomosElementMessenger) Broadcast() go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosElement, *go_atomos.ElementBroadcastI, *go_atomos.ElementBroadcastO] {
	return go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosElement, *go_atomos.ElementBroadcastI, *go_atomos.ElementBroadcastO]{nil, nil, "Broadcast"}
}
func (m helloAtomosElementMessenger) ScaleBonjour() go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosElement, *HABonjourI, *HABonjourO] {
	return go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosElement, *HABonjourI, *HABonjourO]{nil, nil, "ScaleBonjour"}
}

var helloAtomosElementMessengerValue helloAtomosElementMessenger
var helloAtomosElementValue HelloAtomosElement

// Atom Define

type helloAtomosAtomMessenger struct{}

func (m helloAtomosAtomMessenger) ScaleBonjour() go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosAtom, *HABonjourI, *HABonjourO] {
	return go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosAtom, *HABonjourI, *HABonjourO]{nil, nil, "ScaleBonjour"}
}
func (m helloAtomosAtomMessenger) Greeting() go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosAtom, *HAGreetingI, *HAGreetingO] {
	return go_atomos.Messenger[*HelloAtomosElementID, *HelloAtomosAtomID, HelloAtomosAtom, *HAGreetingI, *HAGreetingO]{nil, nil, "Greeting"}
}

var helloAtomosAtomMessengerValue helloAtomosAtomMessenger
var helloAtomosAtomValue HelloAtomosAtom
