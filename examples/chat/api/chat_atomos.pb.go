// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	go_atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//
// Interface
//

// UserManagerAtomId is the interface of UserManagerAtom atomos.
//
type UserManagerAtomId interface {
	go_atomos.Id
	Spawn(from go_atomos.Id, in *UserManagerSpawnArg) (*UserManager, error)
	RegisterUser(from go_atomos.Id, in *RegisterUserReq) (*RegisterUserResp, error)
	FindUser(from go_atomos.Id, in *FindUserReq) (*FindUserResp, error)
}

func GetUserManagerAtomId(c go_atomos.CosmosNode, name string) (UserManagerAtomId, error) {
	ca, err := c.GetAtomId("UserManagerAtom", name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(UserManagerAtomId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// UserManagerAtomAtom is the atomos implements of UserManagerAtom atomos.
//
type UserManagerAtomAtom interface {
	go_atomos.Atom
	Spawn(from go_atomos.Id, in *UserManagerSpawnArg) (*UserManager, error)
	RegisterUser(from go_atomos.Id, in *RegisterUserReq) (*RegisterUserResp, error)
	FindUser(from go_atomos.Id, in *FindUserReq) (*FindUserResp, error)
}

func SpawnUserManagerAtom(c go_atomos.CosmosNode, name string, arg proto.Message) (UserManagerAtomId, error) {
	_, err := c.SpawnAtom("UserManagerAtom", name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId("UserManagerAtom", name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(UserManagerAtomId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

// UserAtomId is the interface of UserAtom atomos.
//
type UserAtomId interface {
	go_atomos.Id
	Spawn(from go_atomos.Id, in *UserSpawnArg) (*User, error)
	UserInfo(from go_atomos.Id, in *UserInfoReq) (*UserInfoResp, error)
	GetFriends(from go_atomos.Id, in *GetFriendsReq) (*GetFriendsResp, error)
	AddFriend(from go_atomos.Id, in *AddFriendReq) (*AddFriendResp, error)
	RoomMessage(from go_atomos.Id, in *RoomMessagePush) (*RoomMessagePushResp, error)
}

func GetUserAtomId(c go_atomos.CosmosNode, name string) (UserAtomId, error) {
	ca, err := c.GetAtomId("UserAtom", name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(UserAtomId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// UserAtomAtom is the atomos implements of UserAtom atomos.
//
type UserAtomAtom interface {
	go_atomos.Atom
	Spawn(from go_atomos.Id, in *UserSpawnArg) (*User, error)
	UserInfo(from go_atomos.Id, in *UserInfoReq) (*UserInfoResp, error)
	GetFriends(from go_atomos.Id, in *GetFriendsReq) (*GetFriendsResp, error)
	AddFriend(from go_atomos.Id, in *AddFriendReq) (*AddFriendResp, error)
	RoomMessage(from go_atomos.Id, in *RoomMessagePush) (*RoomMessagePushResp, error)
}

func SpawnUserAtom(c go_atomos.CosmosNode, name string, arg proto.Message) (UserAtomId, error) {
	_, err := c.SpawnAtom("UserAtom", name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId("UserAtom", name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(UserAtomId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

// ChatRoomManagerAtomId is the interface of ChatRoomManagerAtom atomos.
//
type ChatRoomManagerAtomId interface {
	go_atomos.Id
	Spawn(from go_atomos.Id, in *ChatRoomManagerSpawnArg) (*ChatRoomManager, error)
	CreateRoom(from go_atomos.Id, in *CreateRoomReq) (*CreateRoomResp, error)
	FindRoom(from go_atomos.Id, in *FindRoomReq) (*FindRoomResp, error)
}

func GetChatRoomManagerAtomId(c go_atomos.CosmosNode, name string) (ChatRoomManagerAtomId, error) {
	ca, err := c.GetAtomId("ChatRoomManagerAtom", name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(ChatRoomManagerAtomId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// ChatRoomManagerAtomAtom is the atomos implements of ChatRoomManagerAtom atomos.
//
type ChatRoomManagerAtomAtom interface {
	go_atomos.Atom
	Spawn(from go_atomos.Id, in *ChatRoomManagerSpawnArg) (*ChatRoomManager, error)
	CreateRoom(from go_atomos.Id, in *CreateRoomReq) (*CreateRoomResp, error)
	FindRoom(from go_atomos.Id, in *FindRoomReq) (*FindRoomResp, error)
}

func SpawnChatRoomManagerAtom(c go_atomos.CosmosNode, name string, arg proto.Message) (ChatRoomManagerAtomId, error) {
	_, err := c.SpawnAtom("ChatRoomManagerAtom", name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId("ChatRoomManagerAtom", name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(ChatRoomManagerAtomId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

// ChatRoomAtomId is the interface of ChatRoomAtom atomos.
//
type ChatRoomAtomId interface {
	go_atomos.Id
	Spawn(from go_atomos.Id, in *ChatRoomSpawnArg) (*ChatRoom, error)
	Info(from go_atomos.Id, in *ChatRoomInfoReq) (*ChatRoomInfoResp, error)
	AddMember(from go_atomos.Id, in *AddMemberReq) (*AddMemberResp, error)
	DelMember(from go_atomos.Id, in *DelMemberReq) (*DelMemberResp, error)
	SendMessage(from go_atomos.Id, in *SendMessageReq) (*SendMessageResp, error)
}

func GetChatRoomAtomId(c go_atomos.CosmosNode, name string) (ChatRoomAtomId, error) {
	ca, err := c.GetAtomId("ChatRoomAtom", name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(ChatRoomAtomId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// ChatRoomAtomAtom is the atomos implements of ChatRoomAtom atomos.
//
type ChatRoomAtomAtom interface {
	go_atomos.Atom
	Spawn(from go_atomos.Id, in *ChatRoomSpawnArg) (*ChatRoom, error)
	Info(from go_atomos.Id, in *ChatRoomInfoReq) (*ChatRoomInfoResp, error)
	AddMember(from go_atomos.Id, in *AddMemberReq) (*AddMemberResp, error)
	DelMember(from go_atomos.Id, in *DelMemberReq) (*DelMemberResp, error)
	SendMessage(from go_atomos.Id, in *SendMessageReq) (*SendMessageResp, error)
}

func SpawnChatRoomAtom(c go_atomos.CosmosNode, name string, arg proto.Message) (ChatRoomAtomId, error) {
	_, err := c.SpawnAtom("ChatRoomAtom", name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId("ChatRoomAtom", name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(ChatRoomAtomId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

// KvDbAtomId is the interface of KvDbAtom atomos.
//
type KvDbAtomId interface {
	go_atomos.Id
	Spawn(from go_atomos.Id, in *KvDbSpawnArg) (*KvDb, error)
	Get(from go_atomos.Id, in *DbGetReq) (*DbGetResp, error)
	Set(from go_atomos.Id, in *DbSetReq) (*DbSetResp, error)
	Del(from go_atomos.Id, in *DbDelReq) (*DbDelResp, error)
}

func GetKvDbAtomId(c go_atomos.CosmosNode, name string) (KvDbAtomId, error) {
	ca, err := c.GetAtomId("KvDbAtom", name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(KvDbAtomId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// KvDbAtomAtom is the atomos implements of KvDbAtom atomos.
//
type KvDbAtomAtom interface {
	go_atomos.Atom
	Spawn(from go_atomos.Id, in *KvDbSpawnArg) (*KvDb, error)
	Get(from go_atomos.Id, in *DbGetReq) (*DbGetResp, error)
	Set(from go_atomos.Id, in *DbSetReq) (*DbSetResp, error)
	Del(from go_atomos.Id, in *DbDelReq) (*DbDelResp, error)
}

func SpawnKvDbAtom(c go_atomos.CosmosNode, name string, arg proto.Message) (KvDbAtomId, error) {
	_, err := c.SpawnAtom("KvDbAtom", name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId("KvDbAtom", name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(KvDbAtomId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

//
// Implementation
//

type userManagerAtomId struct {
	go_atomos.Id
}

func (c *userManagerAtomId) Spawn(from go_atomos.Id, in *UserManagerSpawnArg) (*UserManager, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Spawn", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*UserManager)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userManagerAtomId) RegisterUser(from go_atomos.Id, in *RegisterUserReq) (*RegisterUserResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "RegisterUser", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*RegisterUserResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userManagerAtomId) FindUser(from go_atomos.Id, in *FindUserReq) (*FindUserResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "FindUser", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*FindUserResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetUserManagerAtomInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &userManagerAtomId{id} }
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"Spawn":        go_atomos.NewAtomCallConfig(&UserManagerSpawnArg{}, &UserManager{}),
		"RegisterUser": go_atomos.NewAtomCallConfig(&RegisterUserReq{}, &RegisterUserResp{}),
		"FindUser":     go_atomos.NewAtomCallConfig(&FindUserReq{}, &FindUserResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"Spawn": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &UserManagerSpawnArg{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &UserManager{}) },
		},
		"RegisterUser": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RegisterUserReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RegisterUserResp{}) },
		},
		"FindUser": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &FindUserReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &FindUserResp{}) },
		},
	}
	return elem
}

func GetUserManagerAtomImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetUserManagerAtomInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"Spawn": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*UserManagerSpawnArg)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserManagerAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Spawn(from, req)
		},
		"RegisterUser": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RegisterUserReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserManagerAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.RegisterUser(from, req)
		},
		"FindUser": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*FindUserReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserManagerAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.FindUser(from, req)
		},
	}
	return elem
}

type userAtomId struct {
	go_atomos.Id
}

func (c *userAtomId) Spawn(from go_atomos.Id, in *UserSpawnArg) (*User, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Spawn", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*User)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userAtomId) UserInfo(from go_atomos.Id, in *UserInfoReq) (*UserInfoResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "UserInfo", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*UserInfoResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userAtomId) GetFriends(from go_atomos.Id, in *GetFriendsReq) (*GetFriendsResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "GetFriends", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*GetFriendsResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userAtomId) AddFriend(from go_atomos.Id, in *AddFriendReq) (*AddFriendResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "AddFriend", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*AddFriendResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userAtomId) RoomMessage(from go_atomos.Id, in *RoomMessagePush) (*RoomMessagePushResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "RoomMessage", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*RoomMessagePushResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetUserAtomInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &userAtomId{id} }
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"Spawn":       go_atomos.NewAtomCallConfig(&UserSpawnArg{}, &User{}),
		"UserInfo":    go_atomos.NewAtomCallConfig(&UserInfoReq{}, &UserInfoResp{}),
		"GetFriends":  go_atomos.NewAtomCallConfig(&GetFriendsReq{}, &GetFriendsResp{}),
		"AddFriend":   go_atomos.NewAtomCallConfig(&AddFriendReq{}, &AddFriendResp{}),
		"RoomMessage": go_atomos.NewAtomCallConfig(&RoomMessagePush{}, &RoomMessagePushResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"Spawn": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &UserSpawnArg{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &User{}) },
		},
		"UserInfo": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &UserInfoReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &UserInfoResp{}) },
		},
		"GetFriends": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &GetFriendsReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &GetFriendsResp{}) },
		},
		"AddFriend": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &AddFriendReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &AddFriendResp{}) },
		},
		"RoomMessage": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RoomMessagePush{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RoomMessagePushResp{}) },
		},
	}
	return elem
}

func GetUserAtomImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetUserAtomInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"Spawn": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*UserSpawnArg)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Spawn(from, req)
		},
		"UserInfo": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*UserInfoReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.UserInfo(from, req)
		},
		"GetFriends": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*GetFriendsReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.GetFriends(from, req)
		},
		"AddFriend": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*AddFriendReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.AddFriend(from, req)
		},
		"RoomMessage": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RoomMessagePush)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.RoomMessage(from, req)
		},
	}
	return elem
}

type chatRoomManagerAtomId struct {
	go_atomos.Id
}

func (c *chatRoomManagerAtomId) Spawn(from go_atomos.Id, in *ChatRoomManagerSpawnArg) (*ChatRoomManager, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Spawn", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*ChatRoomManager)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomManagerAtomId) CreateRoom(from go_atomos.Id, in *CreateRoomReq) (*CreateRoomResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "CreateRoom", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*CreateRoomResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomManagerAtomId) FindRoom(from go_atomos.Id, in *FindRoomReq) (*FindRoomResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "FindRoom", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*FindRoomResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetChatRoomManagerAtomInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &chatRoomManagerAtomId{id} }
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"Spawn":      go_atomos.NewAtomCallConfig(&ChatRoomManagerSpawnArg{}, &ChatRoomManager{}),
		"CreateRoom": go_atomos.NewAtomCallConfig(&CreateRoomReq{}, &CreateRoomResp{}),
		"FindRoom":   go_atomos.NewAtomCallConfig(&FindRoomReq{}, &FindRoomResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"Spawn": {
			InDec: func(b []byte) (proto.Message, error) {
				return go_atomos.MessageUnmarshal(b, &ChatRoomManagerSpawnArg{})
			},
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomManager{}) },
		},
		"CreateRoom": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &CreateRoomReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &CreateRoomResp{}) },
		},
		"FindRoom": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &FindRoomReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &FindRoomResp{}) },
		},
	}
	return elem
}

func GetChatRoomManagerAtomImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetChatRoomManagerAtomInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"Spawn": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*ChatRoomManagerSpawnArg)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomManagerAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Spawn(from, req)
		},
		"CreateRoom": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*CreateRoomReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomManagerAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.CreateRoom(from, req)
		},
		"FindRoom": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*FindRoomReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomManagerAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.FindRoom(from, req)
		},
	}
	return elem
}

type chatRoomAtomId struct {
	go_atomos.Id
}

func (c *chatRoomAtomId) Spawn(from go_atomos.Id, in *ChatRoomSpawnArg) (*ChatRoom, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Spawn", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*ChatRoom)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomAtomId) Info(from go_atomos.Id, in *ChatRoomInfoReq) (*ChatRoomInfoResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Info", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*ChatRoomInfoResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomAtomId) AddMember(from go_atomos.Id, in *AddMemberReq) (*AddMemberResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "AddMember", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*AddMemberResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomAtomId) DelMember(from go_atomos.Id, in *DelMemberReq) (*DelMemberResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "DelMember", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*DelMemberResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomAtomId) SendMessage(from go_atomos.Id, in *SendMessageReq) (*SendMessageResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "SendMessage", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*SendMessageResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetChatRoomAtomInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &chatRoomAtomId{id} }
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"Spawn":       go_atomos.NewAtomCallConfig(&ChatRoomSpawnArg{}, &ChatRoom{}),
		"Info":        go_atomos.NewAtomCallConfig(&ChatRoomInfoReq{}, &ChatRoomInfoResp{}),
		"AddMember":   go_atomos.NewAtomCallConfig(&AddMemberReq{}, &AddMemberResp{}),
		"DelMember":   go_atomos.NewAtomCallConfig(&DelMemberReq{}, &DelMemberResp{}),
		"SendMessage": go_atomos.NewAtomCallConfig(&SendMessageReq{}, &SendMessageResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"Spawn": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomSpawnArg{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoom{}) },
		},
		"Info": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomInfoReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomInfoResp{}) },
		},
		"AddMember": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &AddMemberReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &AddMemberResp{}) },
		},
		"DelMember": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DelMemberReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DelMemberResp{}) },
		},
		"SendMessage": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &SendMessageReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &SendMessageResp{}) },
		},
	}
	return elem
}

func GetChatRoomAtomImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetChatRoomAtomInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"Spawn": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*ChatRoomSpawnArg)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Spawn(from, req)
		},
		"Info": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*ChatRoomInfoReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Info(from, req)
		},
		"AddMember": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*AddMemberReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.AddMember(from, req)
		},
		"DelMember": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DelMemberReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.DelMember(from, req)
		},
		"SendMessage": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*SendMessageReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.SendMessage(from, req)
		},
	}
	return elem
}

type kvDbAtomId struct {
	go_atomos.Id
}

func (c *kvDbAtomId) Spawn(from go_atomos.Id, in *KvDbSpawnArg) (*KvDb, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Spawn", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*KvDb)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *kvDbAtomId) Get(from go_atomos.Id, in *DbGetReq) (*DbGetResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Get", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*DbGetResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *kvDbAtomId) Set(from go_atomos.Id, in *DbSetReq) (*DbSetResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Set", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*DbSetResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *kvDbAtomId) Del(from go_atomos.Id, in *DbDelReq) (*DbDelResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Del", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*DbDelResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetKvDbAtomInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &kvDbAtomId{id} }
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"Spawn": go_atomos.NewAtomCallConfig(&KvDbSpawnArg{}, &KvDb{}),
		"Get":   go_atomos.NewAtomCallConfig(&DbGetReq{}, &DbGetResp{}),
		"Set":   go_atomos.NewAtomCallConfig(&DbSetReq{}, &DbSetResp{}),
		"Del":   go_atomos.NewAtomCallConfig(&DbDelReq{}, &DbDelResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"Spawn": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &KvDbSpawnArg{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &KvDb{}) },
		},
		"Get": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbGetReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbGetResp{}) },
		},
		"Set": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbSetReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbSetResp{}) },
		},
		"Del": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbDelReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbDelResp{}) },
		},
	}
	return elem
}

func GetKvDbAtomImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetKvDbAtomInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"Spawn": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*KvDbSpawnArg)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(KvDbAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Spawn(from, req)
		},
		"Get": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DbGetReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(KvDbAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Get(from, req)
		},
		"Set": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DbSetReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(KvDbAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Set(from, req)
		},
		"Del": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DbDelReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(KvDbAtomAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Del(from, req)
		},
	}
	return elem
}
