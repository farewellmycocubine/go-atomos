// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	go_atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//////
//// INTERFACES
//

//////////////////////////////////////////
////////// Element: UserManager //////////
//////////////////////////////////////////
//
// 用户管理器Atom
// 是基础服务，提供用户的注册、登录和注销的支持。
//

const UserManagerName = "UserManager"

// UserManagerId is the interface of UserManager atomos.

type UserManagerId interface {
	go_atomos.Id

	// 用户注册
	RegisterUser(from go_atomos.Id, in *RegisterUserReq) (*RegisterUserResp, error)

	// 用户登录
	LoginUser(from go_atomos.Id, in *LoginUserReq) (*LoginUserResp, error)

	// 查找用户
	FindUser(from go_atomos.Id, in *FindUserReq) (*FindUserResp, error)

	// 注销用户
	DeleteUser(from go_atomos.Id, in *DeleteUserReq) (*DeleteUserResp, error)
}

func GetUserManagerId(c go_atomos.CosmosNode, name string) (UserManagerId, error) {
	ca, err := c.GetAtomId(UserManagerName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(UserManagerId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// UserManager is the atomos implements of UserManager atomos.

type UserManager interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *UserManagerSpawnArg, data *UserManagerData) error
	RegisterUser(from go_atomos.Id, in *RegisterUserReq) (*RegisterUserResp, error)
	LoginUser(from go_atomos.Id, in *LoginUserReq) (*LoginUserResp, error)
	FindUser(from go_atomos.Id, in *FindUserReq) (*FindUserResp, error)
	DeleteUser(from go_atomos.Id, in *DeleteUserReq) (*DeleteUserResp, error)
}

func SpawnUserManager(c go_atomos.CosmosNode, name string, arg *UserManagerSpawnArg) (UserManagerId, error) {
	_, err := c.SpawnAtom(UserManagerName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(UserManagerName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(UserManagerId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

///////////////////////////////////
////////// Element: User //////////
///////////////////////////////////
//
// 用户Atom
//

const UserName = "User"

// UserId is the interface of User atomos.

type UserId interface {
	go_atomos.Id

	// 用户
	// 用户信息
	UserInfo(from go_atomos.Id, in *Nil) (*UserInfoResp, error)

	// 好友
	// 所有好友
	GetFriends(from go_atomos.Id, in *Nil) (*GetUserFriendResp, error)

	// （主动方）添加好友，客户端请求
	AddFriend(from go_atomos.Id, in *AddUserFriendReq) (*AddUserFriendResp, error)

	// （主动方）删除好友，客户端请求
	DeleteFriend(from go_atomos.Id, in *DelUserFriendReq) (*DelUserFriendResp, error)

	// （被动方）添加好友，主动方请求
	NoticeAddedFriend(from go_atomos.Id, in *NoticeUserAddedFriendReq) (*NoticeUserAddedFriendResp, error)

	// （被动方）更新好友，主动方请求
	NoticeUpdatedFriend(from go_atomos.Id, in *NoticeUserUpdatedFriendReq) (*Nil, error)

	// （被动方）删除好友，主动方请求
	NoticeDeletedFriend(from go_atomos.Id, in *NoticeUserDeletedFriendReq) (*Nil, error)

	// 房间信息
	// 所有房间
	GetRooms(from go_atomos.Id, in *Nil) (*GetUserRoomsResp, error)

	// （主动方）添加房间
	AddRoom(from go_atomos.Id, in *AddUserRoomReq) (*AddUserRoomResp, error)

	// （主动方）删除房间
	DelRoom(from go_atomos.Id, in *DelUserRoomReq) (*DelUserRoomResp, error)

	// （被东方）房间信息更新推送
	RoomUpdated(from go_atomos.Id, in *RoomUpdatedPush) (*Nil, error)

	// （被东方）房间人员推送
	RoomMemberUpdated(from go_atomos.Id, in *RoomMemberUpdatedPush) (*Nil, error)

	// （被动方）房间消息推送
	RoomMessaging(from go_atomos.Id, in *RoomMessagePush) (*Nil, error)
}

func GetUserId(c go_atomos.CosmosNode, name string) (UserId, error) {
	ca, err := c.GetAtomId(UserName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(UserId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// User is the atomos implements of User atomos.

type User interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *UserSpawnArg, data *UserData) error
	UserInfo(from go_atomos.Id, in *Nil) (*UserInfoResp, error)
	GetFriends(from go_atomos.Id, in *Nil) (*GetUserFriendResp, error)
	AddFriend(from go_atomos.Id, in *AddUserFriendReq) (*AddUserFriendResp, error)
	DeleteFriend(from go_atomos.Id, in *DelUserFriendReq) (*DelUserFriendResp, error)
	NoticeAddedFriend(from go_atomos.Id, in *NoticeUserAddedFriendReq) (*NoticeUserAddedFriendResp, error)
	NoticeUpdatedFriend(from go_atomos.Id, in *NoticeUserUpdatedFriendReq) (*Nil, error)
	NoticeDeletedFriend(from go_atomos.Id, in *NoticeUserDeletedFriendReq) (*Nil, error)
	GetRooms(from go_atomos.Id, in *Nil) (*GetUserRoomsResp, error)
	AddRoom(from go_atomos.Id, in *AddUserRoomReq) (*AddUserRoomResp, error)
	DelRoom(from go_atomos.Id, in *DelUserRoomReq) (*DelUserRoomResp, error)
	RoomUpdated(from go_atomos.Id, in *RoomUpdatedPush) (*Nil, error)
	RoomMemberUpdated(from go_atomos.Id, in *RoomMemberUpdatedPush) (*Nil, error)
	RoomMessaging(from go_atomos.Id, in *RoomMessagePush) (*Nil, error)
}

func SpawnUser(c go_atomos.CosmosNode, name string, arg *UserSpawnArg) (UserId, error) {
	_, err := c.SpawnAtom(UserName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(UserName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(UserId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

//////////////////////////////////////////////
////////// Element: ChatRoomManager //////////
//////////////////////////////////////////////
//
// 房间管理器Atom
//

const ChatRoomManagerName = "ChatRoomManager"

// ChatRoomManagerId is the interface of ChatRoomManager atomos.

type ChatRoomManagerId interface {
	go_atomos.Id

	// 创建房间
	CreateRoom(from go_atomos.Id, in *CreateRoomReq) (*CreateRoomResp, error)

	// 所有房间
	GetRooms(from go_atomos.Id, in *Nil) (*GetRoomsResp, error)

	// 查找房间
	FindRoom(from go_atomos.Id, in *FindRoomReq) (*FindRoomResp, error)

	// 删除房间
	DelRoom(from go_atomos.Id, in *DelRoomReq) (*DelRoomResp, error)
}

func GetChatRoomManagerId(c go_atomos.CosmosNode, name string) (ChatRoomManagerId, error) {
	ca, err := c.GetAtomId(ChatRoomManagerName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(ChatRoomManagerId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// ChatRoomManager is the atomos implements of ChatRoomManager atomos.

type ChatRoomManager interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *ChatRoomManagerSpawnArg, data *ChatRoomManagerData) error
	CreateRoom(from go_atomos.Id, in *CreateRoomReq) (*CreateRoomResp, error)
	GetRooms(from go_atomos.Id, in *Nil) (*GetRoomsResp, error)
	FindRoom(from go_atomos.Id, in *FindRoomReq) (*FindRoomResp, error)
	DelRoom(from go_atomos.Id, in *DelRoomReq) (*DelRoomResp, error)
}

func SpawnChatRoomManager(c go_atomos.CosmosNode, name string, arg *ChatRoomManagerSpawnArg) (ChatRoomManagerId, error) {
	_, err := c.SpawnAtom(ChatRoomManagerName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(ChatRoomManagerName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(ChatRoomManagerId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

///////////////////////////////////////
////////// Element: ChatRoom //////////
///////////////////////////////////////
//
// 房间Atom
//

const ChatRoomName = "ChatRoom"

// ChatRoomId is the interface of ChatRoom atomos.

type ChatRoomId interface {
	go_atomos.Id

	// 房间信息
	Info(from go_atomos.Id, in *Nil) (*ChatRoomInfoResp, error)

	// 更新信息
	Update(from go_atomos.Id, in *ChatRoomUpdateReq) (*ChatRoomUpdateResp, error)

	// 添加房间成员
	AddMember(from go_atomos.Id, in *ChatRoomAddMemberReq) (*ChatRoomAddMemberResp, error)

	// 删除房间成员
	DelMember(from go_atomos.Id, in *ChatRoomDelMemberReq) (*ChatRoomDelMemberResp, error)

	// 发送消息
	SendMessage(from go_atomos.Id, in *ChatRoomSendMessageReq) (*ChatRoomSendMessageResp, error)

	// 删除房间
	DelSelf(from go_atomos.Id, in *Nil) (*Nil, error)
}

func GetChatRoomId(c go_atomos.CosmosNode, name string) (ChatRoomId, error) {
	ca, err := c.GetAtomId(ChatRoomName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(ChatRoomId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// ChatRoom is the atomos implements of ChatRoom atomos.

type ChatRoom interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *ChatRoomSpawnArg, data *ChatRoomData) error
	Info(from go_atomos.Id, in *Nil) (*ChatRoomInfoResp, error)
	Update(from go_atomos.Id, in *ChatRoomUpdateReq) (*ChatRoomUpdateResp, error)
	AddMember(from go_atomos.Id, in *ChatRoomAddMemberReq) (*ChatRoomAddMemberResp, error)
	DelMember(from go_atomos.Id, in *ChatRoomDelMemberReq) (*ChatRoomDelMemberResp, error)
	SendMessage(from go_atomos.Id, in *ChatRoomSendMessageReq) (*ChatRoomSendMessageResp, error)
	DelSelf(from go_atomos.Id, in *Nil) (*Nil, error)
}

func SpawnChatRoom(c go_atomos.CosmosNode, name string, arg *ChatRoomSpawnArg) (ChatRoomId, error) {
	_, err := c.SpawnAtom(ChatRoomName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(ChatRoomName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(ChatRoomId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

///////////////////////////////////////
////////// Element: KvDbAtom //////////
///////////////////////////////////////
//
// KvDb Atom
//

const KvDbAtomName = "KvDbAtom"

// KvDbAtomId is the interface of KvDbAtom atomos.

type KvDbAtomId interface {
	go_atomos.Id

	Get(from go_atomos.Id, in *DbGetReq) (*DbGetResp, error)

	Set(from go_atomos.Id, in *DbSetReq) (*DbSetResp, error)

	Del(from go_atomos.Id, in *DbDelReq) (*DbDelResp, error)
}

func GetKvDbAtomId(c go_atomos.CosmosNode, name string) (KvDbAtomId, error) {
	ca, err := c.GetAtomId(KvDbAtomName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(KvDbAtomId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// KvDbAtom is the atomos implements of KvDbAtom atomos.

type KvDbAtom interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *KvDbSpawnArg, data *KvDb) error
	Get(from go_atomos.Id, in *DbGetReq) (*DbGetResp, error)
	Set(from go_atomos.Id, in *DbSetReq) (*DbSetResp, error)
	Del(from go_atomos.Id, in *DbDelReq) (*DbDelResp, error)
}

func SpawnKvDbAtom(c go_atomos.CosmosNode, name string, arg *KvDbSpawnArg) (KvDbAtomId, error) {
	_, err := c.SpawnAtom(KvDbAtomName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(KvDbAtomName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(KvDbAtomId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

//////
//// IMPLEMENTATIONS
//

//////////////////////////////////////////
////////// Element: UserManager //////////
//////////////////////////////////////////
//
// 用户管理器Atom
// 是基础服务，提供用户的注册、登录和注销的支持。
//

type userManagerId struct {
	go_atomos.Id
}

func (c *userManagerId) RegisterUser(from go_atomos.Id, in *RegisterUserReq) (*RegisterUserResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "RegisterUser", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*RegisterUserResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userManagerId) LoginUser(from go_atomos.Id, in *LoginUserReq) (*LoginUserResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "LoginUser", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*LoginUserResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userManagerId) FindUser(from go_atomos.Id, in *FindUserReq) (*FindUserResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "FindUser", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*FindUserResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userManagerId) DeleteUser(from go_atomos.Id, in *DeleteUserReq) (*DeleteUserResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "DeleteUser", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*DeleteUserResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetUserManagerInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(UserManagerName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &userManagerId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*UserManagerSpawnArg)
		dataT, _ := data.(*UserManagerData)
		return a.(UserManager).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"RegisterUser": go_atomos.NewAtomCallConfig(&RegisterUserReq{}, &RegisterUserResp{}),
		"LoginUser":    go_atomos.NewAtomCallConfig(&LoginUserReq{}, &LoginUserResp{}),
		"FindUser":     go_atomos.NewAtomCallConfig(&FindUserReq{}, &FindUserResp{}),
		"DeleteUser":   go_atomos.NewAtomCallConfig(&DeleteUserReq{}, &DeleteUserResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"RegisterUser": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RegisterUserReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RegisterUserResp{}) },
		},
		"LoginUser": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &LoginUserReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &LoginUserResp{}) },
		},
		"FindUser": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &FindUserReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &FindUserResp{}) },
		},
		"DeleteUser": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DeleteUserReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DeleteUserResp{}) },
		},
	}
	return elem
}

func GetUserManagerImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetUserManagerInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"RegisterUser": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RegisterUserReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserManager)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.RegisterUser(from, req)
		},
		"LoginUser": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*LoginUserReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserManager)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.LoginUser(from, req)
		},
		"FindUser": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*FindUserReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserManager)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.FindUser(from, req)
		},
		"DeleteUser": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DeleteUserReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(UserManager)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.DeleteUser(from, req)
		},
	}
	return elem
}

///////////////////////////////////
////////// Element: User //////////
///////////////////////////////////
//
// 用户Atom
//

type userId struct {
	go_atomos.Id
}

func (c *userId) UserInfo(from go_atomos.Id, in *Nil) (*UserInfoResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "UserInfo", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*UserInfoResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) GetFriends(from go_atomos.Id, in *Nil) (*GetUserFriendResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "GetFriends", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*GetUserFriendResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) AddFriend(from go_atomos.Id, in *AddUserFriendReq) (*AddUserFriendResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "AddFriend", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*AddUserFriendResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) DeleteFriend(from go_atomos.Id, in *DelUserFriendReq) (*DelUserFriendResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "DeleteFriend", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*DelUserFriendResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) NoticeAddedFriend(from go_atomos.Id, in *NoticeUserAddedFriendReq) (*NoticeUserAddedFriendResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "NoticeAddedFriend", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*NoticeUserAddedFriendResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) NoticeUpdatedFriend(from go_atomos.Id, in *NoticeUserUpdatedFriendReq) (*Nil, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "NoticeUpdatedFriend", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*Nil)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) NoticeDeletedFriend(from go_atomos.Id, in *NoticeUserDeletedFriendReq) (*Nil, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "NoticeDeletedFriend", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*Nil)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) GetRooms(from go_atomos.Id, in *Nil) (*GetUserRoomsResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "GetRooms", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*GetUserRoomsResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) AddRoom(from go_atomos.Id, in *AddUserRoomReq) (*AddUserRoomResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "AddRoom", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*AddUserRoomResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) DelRoom(from go_atomos.Id, in *DelUserRoomReq) (*DelUserRoomResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "DelRoom", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*DelUserRoomResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) RoomUpdated(from go_atomos.Id, in *RoomUpdatedPush) (*Nil, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "RoomUpdated", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*Nil)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) RoomMemberUpdated(from go_atomos.Id, in *RoomMemberUpdatedPush) (*Nil, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "RoomMemberUpdated", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*Nil)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *userId) RoomMessaging(from go_atomos.Id, in *RoomMessagePush) (*Nil, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "RoomMessaging", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*Nil)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetUserInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(UserName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &userId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*UserSpawnArg)
		dataT, _ := data.(*UserData)
		return a.(User).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"UserInfo":            go_atomos.NewAtomCallConfig(&Nil{}, &UserInfoResp{}),
		"GetFriends":          go_atomos.NewAtomCallConfig(&Nil{}, &GetUserFriendResp{}),
		"AddFriend":           go_atomos.NewAtomCallConfig(&AddUserFriendReq{}, &AddUserFriendResp{}),
		"DeleteFriend":        go_atomos.NewAtomCallConfig(&DelUserFriendReq{}, &DelUserFriendResp{}),
		"NoticeAddedFriend":   go_atomos.NewAtomCallConfig(&NoticeUserAddedFriendReq{}, &NoticeUserAddedFriendResp{}),
		"NoticeUpdatedFriend": go_atomos.NewAtomCallConfig(&NoticeUserUpdatedFriendReq{}, &Nil{}),
		"NoticeDeletedFriend": go_atomos.NewAtomCallConfig(&NoticeUserDeletedFriendReq{}, &Nil{}),
		"GetRooms":            go_atomos.NewAtomCallConfig(&Nil{}, &GetUserRoomsResp{}),
		"AddRoom":             go_atomos.NewAtomCallConfig(&AddUserRoomReq{}, &AddUserRoomResp{}),
		"DelRoom":             go_atomos.NewAtomCallConfig(&DelUserRoomReq{}, &DelUserRoomResp{}),
		"RoomUpdated":         go_atomos.NewAtomCallConfig(&RoomUpdatedPush{}, &Nil{}),
		"RoomMemberUpdated":   go_atomos.NewAtomCallConfig(&RoomMemberUpdatedPush{}, &Nil{}),
		"RoomMessaging":       go_atomos.NewAtomCallConfig(&RoomMessagePush{}, &Nil{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"UserInfo": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &UserInfoResp{}) },
		},
		"GetFriends": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &GetUserFriendResp{}) },
		},
		"AddFriend": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &AddUserFriendReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &AddUserFriendResp{}) },
		},
		"DeleteFriend": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DelUserFriendReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DelUserFriendResp{}) },
		},
		"NoticeAddedFriend": {
			InDec: func(b []byte) (proto.Message, error) {
				return go_atomos.MessageUnmarshal(b, &NoticeUserAddedFriendReq{})
			},
			OutDec: func(b []byte) (proto.Message, error) {
				return go_atomos.MessageUnmarshal(b, &NoticeUserAddedFriendResp{})
			},
		},
		"NoticeUpdatedFriend": {
			InDec: func(b []byte) (proto.Message, error) {
				return go_atomos.MessageUnmarshal(b, &NoticeUserUpdatedFriendReq{})
			},
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
		},
		"NoticeDeletedFriend": {
			InDec: func(b []byte) (proto.Message, error) {
				return go_atomos.MessageUnmarshal(b, &NoticeUserDeletedFriendReq{})
			},
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
		},
		"GetRooms": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &GetUserRoomsResp{}) },
		},
		"AddRoom": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &AddUserRoomReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &AddUserRoomResp{}) },
		},
		"DelRoom": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DelUserRoomReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DelUserRoomResp{}) },
		},
		"RoomUpdated": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RoomUpdatedPush{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
		},
		"RoomMemberUpdated": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RoomMemberUpdatedPush{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
		},
		"RoomMessaging": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RoomMessagePush{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
		},
	}
	return elem
}

func GetUserImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetUserInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"UserInfo": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*Nil)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.UserInfo(from, req)
		},
		"GetFriends": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*Nil)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.GetFriends(from, req)
		},
		"AddFriend": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*AddUserFriendReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.AddFriend(from, req)
		},
		"DeleteFriend": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DelUserFriendReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.DeleteFriend(from, req)
		},
		"NoticeAddedFriend": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*NoticeUserAddedFriendReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.NoticeAddedFriend(from, req)
		},
		"NoticeUpdatedFriend": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*NoticeUserUpdatedFriendReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.NoticeUpdatedFriend(from, req)
		},
		"NoticeDeletedFriend": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*NoticeUserDeletedFriendReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.NoticeDeletedFriend(from, req)
		},
		"GetRooms": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*Nil)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.GetRooms(from, req)
		},
		"AddRoom": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*AddUserRoomReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.AddRoom(from, req)
		},
		"DelRoom": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DelUserRoomReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.DelRoom(from, req)
		},
		"RoomUpdated": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RoomUpdatedPush)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.RoomUpdated(from, req)
		},
		"RoomMemberUpdated": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RoomMemberUpdatedPush)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.RoomMemberUpdated(from, req)
		},
		"RoomMessaging": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RoomMessagePush)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(User)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.RoomMessaging(from, req)
		},
	}
	return elem
}

//////////////////////////////////////////////
////////// Element: ChatRoomManager //////////
//////////////////////////////////////////////
//
// 房间管理器Atom
//

type chatRoomManagerId struct {
	go_atomos.Id
}

func (c *chatRoomManagerId) CreateRoom(from go_atomos.Id, in *CreateRoomReq) (*CreateRoomResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "CreateRoom", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*CreateRoomResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomManagerId) GetRooms(from go_atomos.Id, in *Nil) (*GetRoomsResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "GetRooms", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*GetRoomsResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomManagerId) FindRoom(from go_atomos.Id, in *FindRoomReq) (*FindRoomResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "FindRoom", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*FindRoomResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomManagerId) DelRoom(from go_atomos.Id, in *DelRoomReq) (*DelRoomResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "DelRoom", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*DelRoomResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetChatRoomManagerInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(ChatRoomManagerName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &chatRoomManagerId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*ChatRoomManagerSpawnArg)
		dataT, _ := data.(*ChatRoomManagerData)
		return a.(ChatRoomManager).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"CreateRoom": go_atomos.NewAtomCallConfig(&CreateRoomReq{}, &CreateRoomResp{}),
		"GetRooms":   go_atomos.NewAtomCallConfig(&Nil{}, &GetRoomsResp{}),
		"FindRoom":   go_atomos.NewAtomCallConfig(&FindRoomReq{}, &FindRoomResp{}),
		"DelRoom":    go_atomos.NewAtomCallConfig(&DelRoomReq{}, &DelRoomResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"CreateRoom": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &CreateRoomReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &CreateRoomResp{}) },
		},
		"GetRooms": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &GetRoomsResp{}) },
		},
		"FindRoom": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &FindRoomReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &FindRoomResp{}) },
		},
		"DelRoom": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DelRoomReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DelRoomResp{}) },
		},
	}
	return elem
}

func GetChatRoomManagerImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetChatRoomManagerInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"CreateRoom": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*CreateRoomReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomManager)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.CreateRoom(from, req)
		},
		"GetRooms": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*Nil)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomManager)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.GetRooms(from, req)
		},
		"FindRoom": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*FindRoomReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomManager)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.FindRoom(from, req)
		},
		"DelRoom": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DelRoomReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoomManager)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.DelRoom(from, req)
		},
	}
	return elem
}

///////////////////////////////////////
////////// Element: ChatRoom //////////
///////////////////////////////////////
//
// 房间Atom
//

type chatRoomId struct {
	go_atomos.Id
}

func (c *chatRoomId) Info(from go_atomos.Id, in *Nil) (*ChatRoomInfoResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Info", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*ChatRoomInfoResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomId) Update(from go_atomos.Id, in *ChatRoomUpdateReq) (*ChatRoomUpdateResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Update", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*ChatRoomUpdateResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomId) AddMember(from go_atomos.Id, in *ChatRoomAddMemberReq) (*ChatRoomAddMemberResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "AddMember", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*ChatRoomAddMemberResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomId) DelMember(from go_atomos.Id, in *ChatRoomDelMemberReq) (*ChatRoomDelMemberResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "DelMember", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*ChatRoomDelMemberResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomId) SendMessage(from go_atomos.Id, in *ChatRoomSendMessageReq) (*ChatRoomSendMessageResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "SendMessage", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*ChatRoomSendMessageResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *chatRoomId) DelSelf(from go_atomos.Id, in *Nil) (*Nil, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "DelSelf", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*Nil)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetChatRoomInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(ChatRoomName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &chatRoomId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*ChatRoomSpawnArg)
		dataT, _ := data.(*ChatRoomData)
		return a.(ChatRoom).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"Info":        go_atomos.NewAtomCallConfig(&Nil{}, &ChatRoomInfoResp{}),
		"Update":      go_atomos.NewAtomCallConfig(&ChatRoomUpdateReq{}, &ChatRoomUpdateResp{}),
		"AddMember":   go_atomos.NewAtomCallConfig(&ChatRoomAddMemberReq{}, &ChatRoomAddMemberResp{}),
		"DelMember":   go_atomos.NewAtomCallConfig(&ChatRoomDelMemberReq{}, &ChatRoomDelMemberResp{}),
		"SendMessage": go_atomos.NewAtomCallConfig(&ChatRoomSendMessageReq{}, &ChatRoomSendMessageResp{}),
		"DelSelf":     go_atomos.NewAtomCallConfig(&Nil{}, &Nil{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"Info": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomInfoResp{}) },
		},
		"Update": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomUpdateReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomUpdateResp{}) },
		},
		"AddMember": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomAddMemberReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomAddMemberResp{}) },
		},
		"DelMember": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomDelMemberReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomDelMemberResp{}) },
		},
		"SendMessage": {
			InDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &ChatRoomSendMessageReq{}) },
			OutDec: func(b []byte) (proto.Message, error) {
				return go_atomos.MessageUnmarshal(b, &ChatRoomSendMessageResp{})
			},
		},
		"DelSelf": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &Nil{}) },
		},
	}
	return elem
}

func GetChatRoomImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetChatRoomInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"Info": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*Nil)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Info(from, req)
		},
		"Update": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*ChatRoomUpdateReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Update(from, req)
		},
		"AddMember": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*ChatRoomAddMemberReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.AddMember(from, req)
		},
		"DelMember": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*ChatRoomDelMemberReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.DelMember(from, req)
		},
		"SendMessage": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*ChatRoomSendMessageReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.SendMessage(from, req)
		},
		"DelSelf": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*Nil)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(ChatRoom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.DelSelf(from, req)
		},
	}
	return elem
}

///////////////////////////////////////
////////// Element: KvDbAtom //////////
///////////////////////////////////////
//
// KvDb Atom
//

type kvDbAtomId struct {
	go_atomos.Id
}

func (c *kvDbAtomId) Get(from go_atomos.Id, in *DbGetReq) (*DbGetResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Get", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*DbGetResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *kvDbAtomId) Set(from go_atomos.Id, in *DbSetReq) (*DbSetResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Set", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*DbSetResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *kvDbAtomId) Del(from go_atomos.Id, in *DbDelReq) (*DbDelResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Del", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*DbDelResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetKvDbAtomInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(KvDbAtomName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &kvDbAtomId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*KvDbSpawnArg)
		dataT, _ := data.(*KvDb)
		return a.(KvDbAtom).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"Get": go_atomos.NewAtomCallConfig(&DbGetReq{}, &DbGetResp{}),
		"Set": go_atomos.NewAtomCallConfig(&DbSetReq{}, &DbSetResp{}),
		"Del": go_atomos.NewAtomCallConfig(&DbDelReq{}, &DbDelResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"Get": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbGetReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbGetResp{}) },
		},
		"Set": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbSetReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbSetResp{}) },
		},
		"Del": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbDelReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &DbDelResp{}) },
		},
	}
	return elem
}

func GetKvDbAtomImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetKvDbAtomInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"Get": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DbGetReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(KvDbAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Get(from, req)
		},
		"Set": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DbSetReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(KvDbAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Set(from, req)
		},
		"Del": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*DbDelReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(KvDbAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Del(from, req)
		},
	}
	return elem
}
