// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	go_atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//////
//// INTERFACES
//

//
// The greeting service definition.
// New line
//

////////////////////////////////////
////////// Element: Hello //////////
////////////////////////////////////

const HelloName = "Hello"

// HelloElement is the atomos implements of Hello element.

type HelloElement interface {
	go_atomos.Atomos
	// Spawn Element
	Spawn(self go_atomos.ElementSelfID, data *HelloData) *go_atomos.Error

	// Sends a greeting
	SayHello(from go_atomos.ID, in *HelloReq) (out *HelloResp, err *go_atomos.Error)

	// Scale Methods

	// Scale Bonjour
	ScaleBonjour(from go_atomos.ID, in *BonjourReq) (*HelloAtomID, *go_atomos.Error)
}

/////////////////////////////////
////////// Atom: Hello //////////
/////////////////////////////////

// HelloAtom is the atomos implements of Hello atom.

type HelloAtom interface {
	go_atomos.Atomos

	// Spawn
	Spawn(self go_atomos.AtomSelfID, arg *HelloSpawnArg, data *HelloData) *go_atomos.Error

	// Sends a greeting
	SayHello(from go_atomos.ID, in *HelloReq) (*HelloResp, *go_atomos.Error)
	// Build net
	BuildNet(from go_atomos.ID, in *BuildNetReq) (*BuildNetResp, *go_atomos.Error)
	// Make panic
	MakePanic(from go_atomos.ID, in *MakePanicIn) (*MakePanicOut, *go_atomos.Error)

	// Scale Methods

	// Scale Bonjour
	ScaleBonjour(from go_atomos.ID, in *BonjourReq) (*BonjourResp, *go_atomos.Error)
}

func SpawnHelloAtom(c go_atomos.CosmosNode, name string, arg *HelloSpawnArg) (*HelloAtomID, *go_atomos.Error) {
	id, tracker, err := c.CosmosSpawnAtom(HelloName, name, arg)
	if id == nil {
		return nil, err.AddStack(nil)
	}
	return &HelloAtomID{id, tracker}, err
}

var helloAtomValue HelloAtom
var helloElementValue HelloElement

//////
//// IMPLEMENTATIONS
//

////////////////////////////////////
////////// Element: Hello //////////
////////////////////////////////////

type HelloElementID struct {
	go_atomos.ID
	*go_atomos.IDTracker
}

func GetHelloElementID(c go_atomos.CosmosNode) (*HelloElementID, *go_atomos.Error) {
	ca, err := c.CosmosGetElementID(HelloName)
	if err != nil {
		return nil, err
	}
	return &HelloElementID{ca, nil}, nil
}

func (c *HelloElementID) SayHello(callerID go_atomos.SelfID, in *HelloReq, ext ...interface{}) (out *HelloResp, err *go_atomos.Error) {
	return helloElementMessengerValue.SayHello().SyncElement(c, callerID, in, ext...)
}

func (c *HelloElementID) AsyncSayHello(callerID go_atomos.SelfID, in *HelloReq, callback func(out *HelloResp, err *go_atomos.Error), ext ...interface{}) {
	helloElementMessengerValue.SayHello().AsyncElement(c, callerID, in, callback, ext...)
}

func (c *HelloElementID) ScaleBonjourGetID(callerID go_atomos.SelfID, in *BonjourReq, ext ...interface{}) (*HelloAtomID, *go_atomos.Error) {
	id, tracker, err := helloElementMessengerValue.ScaleBonjour().GetScaleID(c, callerID, HelloName, in, ext...)
	if err != nil {
		return nil, err.AddStack(nil)
	}
	return &HelloAtomID{id, tracker}, nil
}

func (c *HelloElementID) ScaleBonjour(callerID go_atomos.SelfID, in *BonjourReq, ext ...interface{}) (*BonjourResp, *go_atomos.Error) {
	id, err := c.ScaleBonjourGetID(callerID, in, ext...)
	if err != nil {
		return nil, err
	}
	defer id.Release()
	return helloAtomMessengerValue.Bonjour().SyncAtom(id, callerID, in)
}

func (c *HelloElementID) ScaleAsyncBonjour(callerID go_atomos.SelfID, in *BonjourReq, callback func(*BonjourResp, *go_atomos.Error), ext ...interface{}) {
	id, err := c.ScaleBonjourGetID(callerID, in, ext...)
	if err != nil {
		callback(nil, err)
		return
	}
	defer id.Release()
	helloAtomMessengerValue.Bonjour().AsyncAtom(id, callerID, in, callback, ext...)
}

// Element Messenger

type helloElementMessenger struct {}
var helloElementMessengerValue helloElementMessenger

func (m helloElementMessenger) SayHello() go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloElement, *HelloReq, *HelloResp] {
	/* INTERFACE JUMP HELPER */ _ = func() { _= helloElementValue.SayHello }
	return go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloElement, *HelloReq, *HelloResp]{nil, nil, "SayHello"}
}

func (m helloElementMessenger) ScaleBonjour() go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloElement, *BonjourReq, *BonjourResp] {
	/* INTERFACE JUMP HELPER */ _ = func() { _= helloElementValue.ScaleBonjour }
	return go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloElement, *BonjourReq, *BonjourResp]{nil, nil, "Bonjour"}
}

/////////////////////////////////
////////// Atom: Hello //////////
/////////////////////////////////

type HelloAtomID struct {
	go_atomos.ID
	*go_atomos.IDTracker
}

func GetHelloAtomID(c go_atomos.CosmosNode, name string) (*HelloAtomID, *go_atomos.Error) {
	ca, tracker, err := c.CosmosGetAtomID(HelloName, name)
	if err != nil {
		return nil, err
	}
	return &HelloAtomID{ca, tracker}, nil
}

func (c *HelloAtomID) SayHello(callerID go_atomos.SelfID, in *HelloReq, ext ...interface{}) (out *HelloResp, err *go_atomos.Error) {
	return helloAtomMessengerValue.SayHello().SyncAtom(c, callerID, in, ext...)
}

func (c *HelloAtomID) AsyncSayHello(callerID go_atomos.SelfID, in *HelloReq, callback func(out *HelloResp, err *go_atomos.Error), ext ...interface{}) {
	helloAtomMessengerValue.SayHello().AsyncAtom(c, callerID, in, callback, ext...)
}

func (c *HelloAtomID) BuildNet(callerID go_atomos.SelfID, in *BuildNetReq, ext ...interface{}) (out *BuildNetResp, err *go_atomos.Error) {
	return helloAtomMessengerValue.BuildNet().SyncAtom(c, callerID, in, ext...)
}

func (c *HelloAtomID) AsyncBuildNet(callerID go_atomos.SelfID, in *BuildNetReq, callback func(out *BuildNetResp, err *go_atomos.Error), ext ...interface{}) {
	helloAtomMessengerValue.BuildNet().AsyncAtom(c, callerID, in, callback, ext...)
}

func (c *HelloAtomID) MakePanic(callerID go_atomos.SelfID, in *MakePanicIn, ext ...interface{}) (out *MakePanicOut, err *go_atomos.Error) {
	return helloAtomMessengerValue.MakePanic().SyncAtom(c, callerID, in, ext...)
}

func (c *HelloAtomID) AsyncMakePanic(callerID go_atomos.SelfID, in *MakePanicIn, callback func(out *MakePanicOut, err *go_atomos.Error), ext ...interface{}) {
	helloAtomMessengerValue.MakePanic().AsyncAtom(c, callerID, in, callback, ext...)
}

// Atom Messenger

type helloAtomMessenger struct {}
var helloAtomMessengerValue = helloAtomMessenger{}

func (m helloAtomMessenger) SayHello() go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloAtom, *HelloReq, *HelloResp] {
	/* INTERFACE JUMP HELPER */ _ = func() { _= helloAtomValue.SayHello }
	return go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloAtom, *HelloReq, *HelloResp]{nil, nil, "SayHello"}
}

func (m helloAtomMessenger) BuildNet() go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloAtom, *BuildNetReq, *BuildNetResp] {
	/* INTERFACE JUMP HELPER */ _ = func() { _= helloAtomValue.BuildNet }
	return go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloAtom, *BuildNetReq, *BuildNetResp]{nil, nil, "BuildNet"}
}

func (m helloAtomMessenger) MakePanic() go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloAtom, *MakePanicIn, *MakePanicOut] {
	/* INTERFACE JUMP HELPER */ _ = func() { _= helloAtomValue.MakePanic }
	return go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloAtom, *MakePanicIn, *MakePanicOut]{nil, nil, "MakePanic"}
}

func (m helloAtomMessenger) Bonjour() go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloAtom, *BonjourReq, *BonjourResp] {
	/* INTERFACE JUMP HELPER */ _ = func() { _= helloAtomValue.ScaleBonjour }
	return go_atomos.Messenger[*HelloElementID, *HelloAtomID, HelloAtom, *BonjourReq, *BonjourResp]{nil, nil, "Bonjour"}
}

// Atomos Usages

func GetHelloInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(HelloName, dev)
	elem.ElementSpawner = func(s go_atomos.ElementSelfID, a go_atomos.Atomos, data proto.Message) *go_atomos.Error {
		dataT, _ := data.(*HelloData)
		elem, ok := a.(HelloElement)
		if !ok {
			return go_atomos.NewErrorf(go_atomos.ErrElementNotImplemented, "Element not implemented, type=(HelloElement)")
		}
		return elem.Spawn(s, dataT)
	}
	elem.AtomSpawner = func(s go_atomos.AtomSelfID, a go_atomos.Atomos, arg, data proto.Message) *go_atomos.Error {
		argT, _ := arg.(*HelloSpawnArg)
		dataT, _ := data.(*HelloData)
		atom, ok := a.(HelloAtom)
		if !ok {
			return go_atomos.NewErrorf(go_atomos.ErrAtomNotImplemented, "Atom not implemented, type=(HelloAtom)")
		}
		return atom.Spawn(s, argT, dataT)
	}
	elem.ElementDecoders = map[string]*go_atomos.IOMessageDecoder{
		"SayHello": helloElementMessengerValue.SayHello().Decoder(&HelloReq{}, &HelloResp{}),
		"ScaleBonjour": helloElementMessengerValue.ScaleBonjour().Decoder(&BonjourReq{}, &BonjourResp{}),
	}
	elem.AtomDecoders = map[string]*go_atomos.IOMessageDecoder{
		"SayHello": helloAtomMessengerValue.SayHello().Decoder(&HelloReq{}, &HelloResp{}),
		"BuildNet": helloAtomMessengerValue.BuildNet().Decoder(&BuildNetReq{}, &BuildNetResp{}),
		"MakePanic": helloAtomMessengerValue.MakePanic().Decoder(&MakePanicIn{}, &MakePanicOut{}),
		"ScaleBonjour": helloAtomMessengerValue.Bonjour().Decoder(&BonjourReq{}, &BonjourResp{}),
	}
	return elem
}

func GetHelloImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetHelloInterface(dev)
	elem.ElementHandlers = map[string]go_atomos.MessageHandler{
		"SayHello": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloElementMessengerValue.SayHello().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.SayHello(from, i)
		},
	}
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"Bonjour": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloAtomMessengerValue.Bonjour().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.ScaleBonjour(from, i)
		},
		"SayHello": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloAtomMessengerValue.SayHello().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.SayHello(from, i)
		},
		"BuildNet": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloAtomMessengerValue.BuildNet().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.BuildNet(from, i)
		},
		"MakePanic": func(from go_atomos.ID, to go_atomos.Atomos, in proto.Message) (proto.Message, *go_atomos.Error) {
			a, i, err := helloAtomMessengerValue.MakePanic().ExecuteAtom(to, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.MakePanic(from, i)
		},
	}
	elem.ScaleHandlers = map[string]go_atomos.ScaleHandler{
		"Bonjour": func(from go_atomos.ID, e go_atomos.Atomos, message string, in proto.Message) (id go_atomos.ID, err *go_atomos.Error) {
			a, i, err := helloElementMessengerValue.ScaleBonjour().ExecuteScale(e, in)
			if err != nil {
				return nil, err.AddStack(nil)
			}
			return a.ScaleBonjour(from, i)
		},
	}
	return elem
}
