// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	atomos "github.com/hwangtou/go-atomos"
	"google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//
// Interface
//

// GreeterId is the interface of Greeter atomos.
//
type GreeterId interface {
	atomos.Id
	SayHello(from atomos.Id, in *HelloRequest) (*HelloReply, error)
}

func GetGreeterId(c atomos.CosmosNode, name string) (GreeterId, error) {
	ca, err := c.GetAtomId("Greeter", name)
	if err != nil { return nil, err }
	if c, ok := ca.(GreeterId); ok { return c, nil } else { return nil, atomos.ErrAtomType }
}

// GreeterAtom is the atomos implements of Greeter atomos.
//
type GreeterAtom interface {
	atomos.Atom
	SayHello(from atomos.Id, in *HelloRequest) (*HelloReply, error)
}

func SpawnGreeter(c atomos.CosmosNode, atomName string, arg proto.Message) (GreeterId, error) {
	_, err := c.SpawnAtom("Greeter", atomName, arg)
	if err != nil { return nil, err }
	id, err := c.GetAtomId("Greeter", atomName)
	if err != nil { return nil, err }
	if i, ok := id.(GreeterId); ok { return i, nil }
	return nil, atomos.ErrAtomType
}

//
// Implementation
//

type greeterId struct {
	atomos.Id
}

func (c *greeterId) SayHello(from atomos.Id, in *HelloRequest) (*HelloReply, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "SayHello", in)
	if err != nil { return nil, err }
	reply, ok := r.(*HelloReply)
	if !ok { return nil, atomos.ErrAtomMessageReplyType }
	return reply, nil
}

func GetGreeterInterface(dev atomos.ElementDeveloper) *atomos.ElementInterface {
	elem := atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id atomos.Id) atomos.Id { return &greeterId{id} }
	elem.Config.Messages = map[string]*atomos.AtomMessageConfig{
		"SayHello": atomos.NewAtomCallConfig(&HelloRequest{}, &HelloReply{}),
	}
	elem.AtomMessages = map[string]*atomos.ElementAtomMessage{
		"SayHello": {
			InDec: func(b []byte) (proto.Message, error) { return atomos.MessageUnmarshal(b, &HelloRequest{}) },
			OutDec: func(b []byte) (proto.Message, error) { return atomos.MessageUnmarshal(b, &HelloReply{}) },
		},
	}
	return elem
}

func GetGreeterImplement(dev atomos.ElementDeveloper) *atomos.ElementImplementation {
	elem := atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetGreeterInterface(dev)
	elem.AtomHandlers = map[string]atomos.MessageHandler{
		"SayHello": func(from atomos.Id, to atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*HelloRequest)
			if !ok { return nil, atomos.ErrAtomMessageArgType }
			a, ok := to.(GreeterAtom)
			if !ok { return nil, atomos.ErrAtomMessageAtomType }
			return a.SayHello(from, req)
		},
	}
	return elem
}
