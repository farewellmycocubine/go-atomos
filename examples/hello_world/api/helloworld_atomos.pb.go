// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	go_atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//////
//// INTERFACES
//

//////////////////////////////////////
////////// Element: Greeter //////////
//////////////////////////////////////
//
// The greeting service definition.
// New line
//

const GreeterName = "Greeter"

// GreeterId is the interface of Greeter atomos.

type GreeterId interface {
	go_atomos.Id

	// Sends a greeting
	SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error)
}

func GetGreeterId(c go_atomos.CosmosNode, name string) (GreeterId, error) {
	ca, err := c.GetAtomId(GreeterName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(GreeterId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// Greeter is the atomos implements of Greeter atomos.

type Greeter interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *HelloSpawnArg, data *HelloData) error
	SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error)
}

func SpawnGreeter(c go_atomos.CosmosNode, name string, arg *HelloSpawnArg) (GreeterId, error) {
	_, err := c.SpawnAtom(GreeterName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(GreeterName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(GreeterId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

////////////////////////////////////////
////////// Element: TaskBooth //////////
////////////////////////////////////////
//
// 展示如何使用任务
//

const TaskBoothName = "TaskBooth"

// TaskBoothId is the interface of TaskBooth atomos.

type TaskBoothId interface {
	go_atomos.Id

	// 开始演示各种任务的使用方式
	StartTask(from go_atomos.Id, in *StartTaskReq) (*StartTaskResp, error)
}

func GetTaskBoothId(c go_atomos.CosmosNode, name string) (TaskBoothId, error) {
	ca, err := c.GetAtomId(TaskBoothName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(TaskBoothId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// TaskBooth is the atomos implements of TaskBooth atomos.

type TaskBooth interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *TaskBoothSpawnArg, data *TaskBoothData) error
	StartTask(from go_atomos.Id, in *StartTaskReq) (*StartTaskResp, error)
}

func SpawnTaskBooth(c go_atomos.CosmosNode, name string, arg *TaskBoothSpawnArg) (TaskBoothId, error) {
	_, err := c.SpawnAtom(TaskBoothName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(TaskBoothName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(TaskBoothId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

//////////////////////////////////////////
////////// Element: RemoteBooth //////////
//////////////////////////////////////////
//
// 展示如何使用远端
//

const RemoteBoothName = "RemoteBooth"

// RemoteBoothId is the interface of RemoteBooth atomos.

type RemoteBoothId interface {
	go_atomos.Id

	SayHello(from go_atomos.Id, in *RemoteSayHelloReq) (*RemoteSayHelloResp, error)

	Watch(from go_atomos.Id, in *RemoteWatchReq) (*RemoteWatchResp, error)

	Unwatch(from go_atomos.Id, in *RemoteUnwatchReq) (*RemoteUnwatchResp, error)
}

func GetRemoteBoothId(c go_atomos.CosmosNode, name string) (RemoteBoothId, error) {
	ca, err := c.GetAtomId(RemoteBoothName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(RemoteBoothId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// RemoteBooth is the atomos implements of RemoteBooth atomos.

type RemoteBooth interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *RemoteBoothSpawnArg, data *RemoteBoothData) error
	SayHello(from go_atomos.Id, in *RemoteSayHelloReq) (*RemoteSayHelloResp, error)
	Watch(from go_atomos.Id, in *RemoteWatchReq) (*RemoteWatchResp, error)
	Unwatch(from go_atomos.Id, in *RemoteUnwatchReq) (*RemoteUnwatchResp, error)
}

func SpawnRemoteBooth(c go_atomos.CosmosNode, name string, arg *RemoteBoothSpawnArg) (RemoteBoothId, error) {
	_, err := c.SpawnAtom(RemoteBoothName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(RemoteBoothName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(RemoteBoothId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

/////////////////////////////////////////
////////// Element: LocalBooth //////////
/////////////////////////////////////////
//
// 远端的本地调用
//

const LocalBoothName = "LocalBooth"

// LocalBoothId is the interface of LocalBooth atomos.

type LocalBoothId interface {
	go_atomos.Id

	RemoteNotice(from go_atomos.Id, in *LocalRemoteNoticeReq) (*LocalRemoteNoticeResp, error)
}

func GetLocalBoothId(c go_atomos.CosmosNode, name string) (LocalBoothId, error) {
	ca, err := c.GetAtomId(LocalBoothName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(LocalBoothId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// LocalBooth is the atomos implements of LocalBooth atomos.

type LocalBooth interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *LocalBoothSpawnArg, data *LocalBoothSpawnData) error
	RemoteNotice(from go_atomos.Id, in *LocalRemoteNoticeReq) (*LocalRemoteNoticeResp, error)
}

func SpawnLocalBooth(c go_atomos.CosmosNode, name string, arg *LocalBoothSpawnArg) (LocalBoothId, error) {
	_, err := c.SpawnAtom(LocalBoothName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(LocalBoothName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(LocalBoothId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

////////////////////////////////////////////
////////// Element: WormholeBooth //////////
////////////////////////////////////////////
//
// 虫洞
//

const WormholeBoothName = "WormholeBooth"

// WormholeBoothId is the interface of WormholeBooth atomos.

type WormholeBoothId interface {
	go_atomos.WormholeId
}

func GetWormholeBoothId(c go_atomos.CosmosNode, name string) (WormholeBoothId, error) {
	ca, err := c.GetAtomId(WormholeBoothName, name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(WormholeBoothId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// WormholeBooth is the atomos implements of WormholeBooth atomos.

type WormholeBooth interface {
	go_atomos.WormholeAtom
	Spawn(self go_atomos.AtomSelf, arg *WormholeBoothSpawnArg, data *WormholeBoothData) error
}

func SpawnWormholeBooth(c go_atomos.CosmosNode, name string, arg *WormholeBoothSpawnArg) (WormholeBoothId, error) {
	_, err := c.SpawnAtom(WormholeBoothName, name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId(WormholeBoothName, name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(WormholeBoothId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

//////
//// IMPLEMENTATIONS
//

//////////////////////////////////////
////////// Element: Greeter //////////
//////////////////////////////////////
//
// The greeting service definition.
// New line
//

type greeterId struct {
	go_atomos.Id
}

func (c *greeterId) SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "SayHello", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*HelloReply)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetGreeterInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(GreeterName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &greeterId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*HelloSpawnArg)
		dataT, _ := data.(*HelloData)
		return a.(Greeter).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"SayHello": go_atomos.NewAtomCallConfig(&HelloRequest{}, &HelloReply{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"SayHello": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &HelloRequest{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &HelloReply{}) },
		},
	}
	return elem
}

func GetGreeterImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetGreeterInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"SayHello": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*HelloRequest)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(Greeter)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.SayHello(from, req)
		},
	}
	return elem
}

////////////////////////////////////////
////////// Element: TaskBooth //////////
////////////////////////////////////////
//
// 展示如何使用任务
//

type taskBoothId struct {
	go_atomos.Id
}

func (c *taskBoothId) StartTask(from go_atomos.Id, in *StartTaskReq) (*StartTaskResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "StartTask", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*StartTaskResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetTaskBoothInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(TaskBoothName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &taskBoothId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*TaskBoothSpawnArg)
		dataT, _ := data.(*TaskBoothData)
		return a.(TaskBooth).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"StartTask": go_atomos.NewAtomCallConfig(&StartTaskReq{}, &StartTaskResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"StartTask": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &StartTaskReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &StartTaskResp{}) },
		},
	}
	return elem
}

func GetTaskBoothImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetTaskBoothInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"StartTask": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*StartTaskReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(TaskBooth)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.StartTask(from, req)
		},
	}
	return elem
}

//////////////////////////////////////////
////////// Element: RemoteBooth //////////
//////////////////////////////////////////
//
// 展示如何使用远端
//

type remoteBoothId struct {
	go_atomos.Id
}

func (c *remoteBoothId) SayHello(from go_atomos.Id, in *RemoteSayHelloReq) (*RemoteSayHelloResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "SayHello", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*RemoteSayHelloResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *remoteBoothId) Watch(from go_atomos.Id, in *RemoteWatchReq) (*RemoteWatchResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Watch", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*RemoteWatchResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func (c *remoteBoothId) Unwatch(from go_atomos.Id, in *RemoteUnwatchReq) (*RemoteUnwatchResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "Unwatch", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*RemoteUnwatchResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetRemoteBoothInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(RemoteBoothName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &remoteBoothId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*RemoteBoothSpawnArg)
		dataT, _ := data.(*RemoteBoothData)
		return a.(RemoteBooth).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"SayHello": go_atomos.NewAtomCallConfig(&RemoteSayHelloReq{}, &RemoteSayHelloResp{}),
		"Watch":    go_atomos.NewAtomCallConfig(&RemoteWatchReq{}, &RemoteWatchResp{}),
		"Unwatch":  go_atomos.NewAtomCallConfig(&RemoteUnwatchReq{}, &RemoteUnwatchResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"SayHello": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RemoteSayHelloReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RemoteSayHelloResp{}) },
		},
		"Watch": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RemoteWatchReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RemoteWatchResp{}) },
		},
		"Unwatch": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RemoteUnwatchReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &RemoteUnwatchResp{}) },
		},
	}
	return elem
}

func GetRemoteBoothImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetRemoteBoothInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"SayHello": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RemoteSayHelloReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(RemoteBooth)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.SayHello(from, req)
		},
		"Watch": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RemoteWatchReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(RemoteBooth)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Watch(from, req)
		},
		"Unwatch": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*RemoteUnwatchReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(RemoteBooth)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.Unwatch(from, req)
		},
	}
	return elem
}

/////////////////////////////////////////
////////// Element: LocalBooth //////////
/////////////////////////////////////////
//
// 远端的本地调用
//

type localBoothId struct {
	go_atomos.Id
}

func (c *localBoothId) RemoteNotice(from go_atomos.Id, in *LocalRemoteNoticeReq) (*LocalRemoteNoticeResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "RemoteNotice", in)
	if r == nil {
		return nil, err
	}
	reply, ok := r.(*LocalRemoteNoticeResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetLocalBoothInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(LocalBoothName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &localBoothId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*LocalBoothSpawnArg)
		dataT, _ := data.(*LocalBoothSpawnData)
		return a.(LocalBooth).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"RemoteNotice": go_atomos.NewAtomCallConfig(&LocalRemoteNoticeReq{}, &LocalRemoteNoticeResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"RemoteNotice": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &LocalRemoteNoticeReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &LocalRemoteNoticeResp{}) },
		},
	}
	return elem
}

func GetLocalBoothImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetLocalBoothInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"RemoteNotice": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*LocalRemoteNoticeReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(LocalBooth)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.RemoteNotice(from, req)
		},
	}
	return elem
}

////////////////////////////////////////////
////////// Element: WormholeBooth //////////
////////////////////////////////////////////
//
// 虫洞
//

type wormholeBoothId struct {
	go_atomos.WormholeId
}

func GetWormholeBoothInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(WormholeBoothName, dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &wormholeBoothId{id.(go_atomos.WormholeId)} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*WormholeBoothSpawnArg)
		dataT, _ := data.(*WormholeBoothData)
		return a.(WormholeBooth).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{}
	return elem
}

func GetWormholeBoothImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetWormholeBoothInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{}
	return elem
}
