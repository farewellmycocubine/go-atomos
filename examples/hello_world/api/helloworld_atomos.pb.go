// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	go_atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//////
//// INTERFACES
//

//////////////////////////////////////
////////// Element: Greeter //////////
//////////////////////////////////////
//
// The greeting service definition.
// New line
//

// GreeterId is the interface of Greeter atomos.

type GreeterId interface {
	go_atomos.Id

	// Sends a greeting
	SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error)
}

func GetGreeterId(c go_atomos.CosmosNode, name string) (GreeterId, error) {
	ca, err := c.GetAtomId("Greeter", name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(GreeterId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// Greeter is the atomos implements of Greeter atomos.

type Greeter interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *HelloSpawnArg, data *HelloData) error
	SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error)
}

func SpawnGreeter(c go_atomos.CosmosNode, name string, arg proto.Message) (GreeterId, error) {
	_, err := c.SpawnAtom("Greeter", name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId("Greeter", name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(GreeterId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

////////////////////////////////////////
////////// Element: TaskBooth //////////
////////////////////////////////////////

// TaskBoothId is the interface of TaskBooth atomos.

type TaskBoothId interface {
	go_atomos.Id

	StartTask(from go_atomos.Id, in *StartTaskReq) (*StartTaskResp, error)
}

func GetTaskBoothId(c go_atomos.CosmosNode, name string) (TaskBoothId, error) {
	ca, err := c.GetAtomId("TaskBooth", name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(TaskBoothId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// TaskBooth is the atomos implements of TaskBooth atomos.

type TaskBooth interface {
	go_atomos.Atom
	Spawn(self go_atomos.AtomSelf, arg *TaskBoothSpawnArg, data *TaskBoothData) error
	StartTask(from go_atomos.Id, in *StartTaskReq) (*StartTaskResp, error)
}

func SpawnTaskBooth(c go_atomos.CosmosNode, name string, arg proto.Message) (TaskBoothId, error) {
	_, err := c.SpawnAtom("TaskBooth", name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId("TaskBooth", name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(TaskBoothId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

//////
//// IMPLEMENTATIONS
//

//////////////////////////////////////
////////// Element: Greeter //////////
//////////////////////////////////////
//
// The greeting service definition.
// New line
//

type greeterId struct {
	go_atomos.Id
}

func (c *greeterId) SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "SayHello", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*HelloReply)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetGreeterInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &greeterId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*HelloSpawnArg)
		dataT, _ := data.(*HelloData)
		return a.(Greeter).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"SayHello": go_atomos.NewAtomCallConfig(&HelloRequest{}, &HelloReply{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"SayHello": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &HelloRequest{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &HelloReply{}) },
		},
	}
	return elem
}

func GetGreeterImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetGreeterInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"SayHello": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*HelloRequest)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(Greeter)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.SayHello(from, req)
		},
	}
	return elem
}

////////////////////////////////////////
////////// Element: TaskBooth //////////
////////////////////////////////////////

type taskBoothId struct {
	go_atomos.Id
}

func (c *taskBoothId) StartTask(from go_atomos.Id, in *StartTaskReq) (*StartTaskResp, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "StartTask", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*StartTaskResp)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetTaskBoothInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &taskBoothId{id} }
	elem.AtomSpawner = func(s go_atomos.AtomSelf, a go_atomos.Atom, arg, data proto.Message) error {
		argT, _ := arg.(*TaskBoothSpawnArg)
		dataT, _ := data.(*TaskBoothData)
		return a.(TaskBooth).Spawn(s, argT, dataT)
	}
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"StartTask": go_atomos.NewAtomCallConfig(&StartTaskReq{}, &StartTaskResp{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"StartTask": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &StartTaskReq{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &StartTaskResp{}) },
		},
	}
	return elem
}

func GetTaskBoothImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetTaskBoothInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"StartTask": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*StartTaskReq)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(TaskBooth)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.StartTask(from, req)
		},
	}
	return elem
}
