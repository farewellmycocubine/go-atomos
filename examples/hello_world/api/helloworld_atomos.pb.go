// Code generated by protoc-gen-go-atomos. DO NOT EDIT.

package api

import (
	go_atomos "github.com/hwangtou/go-atomos"
	proto "google.golang.org/protobuf/proto"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the atomos package it is being compiled against.

//
// Interface
//

// GreeterId is the interface of Greeter atomos.
//
type GreeterId interface {
	go_atomos.Id
	SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error)
}

func GetGreeterId(c go_atomos.CosmosNode, name string) (GreeterId, error) {
	ca, err := c.GetAtomId("Greeter", name)
	if err != nil {
		return nil, err
	}
	if c, ok := ca.(GreeterId); ok {
		return c, nil
	} else {
		return nil, go_atomos.ErrAtomType
	}
}

// GreeterAtom is the atomos implements of Greeter atomos.
//
type GreeterAtom interface {
	go_atomos.Atom
	SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error)
}

func SpawnGreeter(c go_atomos.CosmosNode, name string, arg proto.Message) (GreeterId, error) {
	_, err := c.SpawnAtom("Greeter", name, arg)
	if err != nil {
		return nil, err
	}
	id, err := c.GetAtomId("Greeter", name)
	if err != nil {
		return nil, err
	}
	if i, ok := id.(GreeterId); ok {
		return i, nil
	}
	return nil, go_atomos.ErrAtomType
}

//
// Implementation
//

type greeterId struct {
	go_atomos.Id
}

func (c *greeterId) SayHello(from go_atomos.Id, in *HelloRequest) (*HelloReply, error) {
	r, err := c.Cosmos().MessageAtom(from, c, "SayHello", in)
	if err != nil {
		return nil, err
	}
	reply, ok := r.(*HelloReply)
	if !ok {
		return nil, go_atomos.ErrAtomMessageReplyType
	}
	return reply, nil
}

func GetGreeterInterface(dev go_atomos.ElementDeveloper) *go_atomos.ElementInterface {
	elem := go_atomos.NewInterfaceFromDeveloper(dev)
	elem.AtomIdConstructor = func(id go_atomos.Id) go_atomos.Id { return &greeterId{id} }
	elem.Config.Messages = map[string]*go_atomos.AtomMessageConfig{
		"SayHello": go_atomos.NewAtomCallConfig(&HelloRequest{}, &HelloReply{}),
	}
	elem.AtomMessages = map[string]*go_atomos.ElementAtomMessage{
		"SayHello": {
			InDec:  func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &HelloRequest{}) },
			OutDec: func(b []byte) (proto.Message, error) { return go_atomos.MessageUnmarshal(b, &HelloReply{}) },
		},
	}
	return elem
}

func GetGreeterImplement(dev go_atomos.ElementDeveloper) *go_atomos.ElementImplementation {
	elem := go_atomos.NewImplementationFromDeveloper(dev)
	elem.Interface = GetGreeterInterface(dev)
	elem.AtomHandlers = map[string]go_atomos.MessageHandler{
		"SayHello": func(from go_atomos.Id, to go_atomos.Atom, in proto.Message) (proto.Message, error) {
			req, ok := in.(*HelloRequest)
			if !ok {
				return nil, go_atomos.ErrAtomMessageArgType
			}
			a, ok := to.(GreeterAtom)
			if !ok {
				return nil, go_atomos.ErrAtomMessageAtomType
			}
			return a.SayHello(from, req)
		},
	}
	return elem
}
