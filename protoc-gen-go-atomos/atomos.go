package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	atomosPackage = protogen.GoImportPath("github.com/hwangtou/go-atomos")
	protobufPackage = protogen.GoImportPath("google.golang.org/protobuf/proto")
)

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_atomos.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-atomos. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the atom definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the atomos package it is being compiled against.")
	g.P()
	g.P("//")
	g.P("// Interface")
	g.P("//")
	g.P()
	for _, service := range file.Services {
		genIdInterface(g, service)
		genGetIdInterface(g, service)
		genAtomInterface(g, service)
	}
	g.P()
	g.P("//")
	g.P("// Implementation")
	g.P("//")
	g.P()
	for _, service := range file.Services {
		genIdInternal(g, service)
		genDesc(file, g, service)
	}
}

func genIdInterface(g *protogen.GeneratedFile, service *protogen.Service) {
	idName := service.GoName + "Id"

	g.P("// ", idName, " is the interface of ", service.GoName, " atomos.")
	g.P("//")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(idName, service.Location)
	g.P("type ", idName, " interface {")
	g.P(atomosPackage.Ident("Id"))
	for _, method := range service.Methods {
		g.Annotate(idName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		methodSign(g, method)
	}
	g.P("}")
	g.P()
}

func genGetIdInterface(g *protogen.GeneratedFile, service *protogen.Service) {
	idName := service.GoName + "Id"

	// NewClient factory.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	g.P("func Get", idName, " (c ", atomosPackage.Ident("CosmosNode"), ", name string) (", idName, ", error) {")
	g.P("ca, err := c.GetAtomId(\"", service.GoName, "\", name)")
	g.P("if err != nil { return nil, err }")
	g.P("if c, ok := ca.(", idName, "); ok { return c, nil } else { return nil, ", atomosPackage.Ident("ErrAtomType"), " }")
	g.P("}")
	g.P()
}

func genIdInternal(g *protogen.GeneratedFile, service *protogen.Service) {
	idName := service.GoName + "Id"

	// Id structure.
	g.P("type ", noExport(idName), " struct {")
	g.P(atomosPackage.Ident("Id"))
	g.P("}")
	g.P()

	// Client method implementations.
	for _, method := range service.Methods {
		g.P("func (c *", noExport(idName), ") ", method.GoName + "(from ", atomosPackage.Ident("Id"),
			", in *", g.QualifiedGoIdent(method.Input.GoIdent),
			") (*", g.QualifiedGoIdent(method.Output.GoIdent), ", error)", " {")
		g.P("r, err := c.Cosmos().MessageAtom(from, c, \"", method.GoName, "\", in)")
		g.P("if err != nil { return nil, err }")
		g.P("reply, ok := r.(*", method.Output.GoIdent, ")")
		g.P("if !ok { return nil, ", atomosPackage.Ident("ErrAtomMessageReplyType"), " }")
		g.P("return reply, nil")
		g.P("}")
		g.P()
	}
}

func genAtomInterface(g *protogen.GeneratedFile, service *protogen.Service) {
	atomName := service.GoName + "Atom"
	idName := service.GoName + "Id"

	// Server struct.
	g.P("// ", atomName, " is the atomos implements of ", service.GoName, " atomos.")
	g.P("//")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(atomName, service.Location)
	g.P("type ", atomName, " interface {")
	g.P(atomosPackage.Ident("Atom"))
	for _, method := range service.Methods {
		g.Annotate(atomName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		methodSign(g, method)
	}
	g.P("}")
	g.P()

	// Spawn
	g.P("func Spawn", service.GoName, "(c ", atomosPackage.Ident("CosmosNode"), ", name string, arg proto.Message) (",
		idName, ", error) {")
	g.P("_, err := c.SpawnAtom(\"", service.GoName, "\", name, arg)")
	g.P("if err != nil { return nil, err }")
	g.P("id, err := c.GetAtomId(\"", service.GoName, "\", name)")
	g.P("if err != nil { return nil, err; }")
	g.P("if i, ok := id.(", idName, "); ok { return i, nil }")
	g.P("return nil, ", atomosPackage.Ident("ErrAtomType"))
	g.P("}")
}

func genDesc(file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	atomIdName := atomosPackage.Ident("Id")
	atomTypeName := service.GoName + "Atom"
	idName := service.GoName + "Id"
	interfaceName := service.GoName + "Interface"

	g.P("func Get", service.GoName, "Interface(dev ", atomosPackage.Ident("ElementDeveloper"), ") *", atomosPackage.Ident("ElementInterface"), "{")
	g.P("elem := ", atomosPackage.Ident("NewInterfaceFromDeveloper"), "(dev)")
	g.P("elem.AtomIdConstructor = func(id ", atomIdName, ") ", atomIdName, " { return &", noExport(idName), "{id} }")
	g.P("elem.Config.Messages = map[string]*", atomosPackage.Ident("AtomMessageConfig"), "{")
	for _, method := range service.Methods {
		g.P("\"", method.GoName, "\": ", atomosPackage.Ident("NewAtomCallConfig"), "(&", method.Input.GoIdent, "{}, &", method.Output.GoIdent, "{}),")
	}
	g.P("}")
	g.P("elem.AtomMessages = map[string]*", atomosPackage.Ident("ElementAtomMessage"), "{")
	for _, method := range service.Methods {
		g.P("\"", method.GoName, "\": {")
		g.P("InDec: func(b []byte) (", protobufPackage.Ident("Message"), ", error) { return ", atomosPackage.Ident("MessageUnmarshal"), "(b, &", method.Input.GoIdent, "{}) },")
		g.P("OutDec: func(b []byte) (", protobufPackage.Ident("Message"), ", error) { return ", atomosPackage.Ident("MessageUnmarshal"), "(b, &", method.Output.GoIdent, "{}) },")
		g.P("},")
	}
	g.P("}")
	g.P("return elem")
	g.P("}")

	g.P()

	g.P("func Get", service.GoName, "Implement(dev ", atomosPackage.Ident("ElementDeveloper"), ") *", atomosPackage.Ident("ElementImplementation"), "{")
	g.P("elem := ", atomosPackage.Ident("NewImplementationFromDeveloper"), "(dev)")
	g.P("elem.Interface = Get", interfaceName, "(dev)")
	g.P("elem.AtomHandlers = map[string]", atomosPackage.Ident("MessageHandler"), "{")
	for _, method := range service.Methods {
		g.P("\"", method.GoName, "\": func(from ", atomosPackage.Ident("Id"), ", to ", atomosPackage.Ident("Atom"), ", in ", protobufPackage.Ident("Message"), ") (", protobufPackage.Ident("Message"), ", error) {")
		g.P("req, ok := in.(*", method.Input.GoIdent, ")")
		g.P("if !ok { return nil, ", atomosPackage.Ident("ErrAtomMessageArgType"), "}")
		g.P("a, ok := to.(", atomTypeName, ")")
		g.P("if !ok { return nil, ", atomosPackage.Ident("ErrAtomMessageAtomType"), "}")
		g.P("return a.", method.GoName, "(from, req)")
		g.P("},")
	}
	g.P("}")
	g.P("return elem")
	g.P("}")
}

const deprecationComment = "// Deprecated: Do not use."

func methodSign(g *protogen.GeneratedFile, method *protogen.Method) {
	g.P(method.GoName + "(from ", atomosPackage.Ident("Id"),
		", in *", g.QualifiedGoIdent(method.Input.GoIdent),
		") (*", g.QualifiedGoIdent(method.Output.GoIdent), ", error)")
}

func noExport(s string) string {
	return strings.ToLower(s[:1]) + s[1:]
}
