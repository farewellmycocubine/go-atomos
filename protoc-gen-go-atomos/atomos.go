package main

import (
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	atomosPackage = protogen.GoImportPath("github.com/hwangtou/go-atomos")
	protobufPackage = protogen.GoImportPath("github.com/golang/protobuf/proto")
)

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_atomos.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-atomos. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the atom definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	g.P("// This is a compile-time assertion to ensure that this generated file")
	g.P("// is compatible with the atomos package it is being compiled against.")
	g.P()
	g.P("//")
	g.P("// PUBLIC")
	g.P("//")
	g.P()
	for _, service := range file.Services {
		genIdInterface(g, service)
		genGetIdInterface(g, service)
		genAtomInterface(g, service)
	}
	g.P()
	g.P("//")
	g.P("// INTERNAL")
	g.P("//")
	g.P()
	for _, service := range file.Services {
		genIdInternal(g, service)
		genDesc(file, g, service)
	}
}

func genIdInterface(g *protogen.GeneratedFile, service *protogen.Service) {
	idName := service.GoName + "Id"

	g.P("// ", idName, " is the interface of ", service.GoName, " atomos.")
	g.P("//")

	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(idName, service.Location)
	g.P("type ", idName, " interface {")
	g.P(atomosPackage.Ident("Id"))
	for _, method := range service.Methods {
		g.Annotate(idName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		methodSign(g, method)
	}
	g.P("}")
	g.P()
}

func genGetIdInterface(g *protogen.GeneratedFile, service *protogen.Service) {
	idName := service.GoName + "Id"

	// NewClient factory.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	g.P("func Get", idName, " (c ", atomosPackage.Ident("CosmosNode"), ", name string) (", idName, ", error) {")
	g.P("ca, err := c.GetAtomId(&", descName(service.GoName), ", name)")
	g.P("if err != nil { return nil, err }")
	g.P("if c, ok := ca.(", idName, "); ok { return c, nil } else { return nil, ", atomosPackage.Ident("ErrCustomizeAtomType"), " }")
	g.P("}")
	g.P()
}

func genIdInternal(g *protogen.GeneratedFile, service *protogen.Service) {
	idName := service.GoName + "Id"

	// Id structure.
	g.P("type ", noExport(idName), " struct {")
	g.P("world ", atomosPackage.Ident("CosmosNode"))
	g.P("aType string")
	g.P("aName string")
	g.P("}")
	g.P()

	g.P("func (c *", noExport(idName), ") Cosmos() go_atomos.CosmosNode {")
	g.P("return c.world")
	g.P("}")
	g.P()

	g.P("func (c *", noExport(idName), ") Type() string {")
	g.P("return c.aType")
	g.P("}")
	g.P()

	g.P("func (c *", noExport(idName), ") Name() string {")
	g.P("return c.aName")
	g.P("}")
	g.P()

	g.P("func (c *", noExport(idName), ") Kill(from go_atomos.Id) error {")
	g.P("return c.world.CloseAtom(from, ", descName(service.GoName), ".Name, c.aName)")
	g.P("}")
	g.P()

	// Client method implementations.
	for _, method := range service.Methods {
		service := method.Parent
		g.P("func (c *", noExport(idName), ") ", method.GoName + "(from ", atomosPackage.Ident("Id"),
			", in *", g.QualifiedGoIdent(method.Input.GoIdent),
			") (*", g.QualifiedGoIdent(method.Output.GoIdent), ", error)", " {")
		g.P("r, err := c.world.CallAtom(from, ", descName(service.GoName), ".Name, c.aName, \"", method.GoName, "\", in)")
		g.P("if err != nil { return nil, err }")
		g.P("reply, ok := r.(*", method.Output.GoIdent, ")")
		g.P("if !ok { return nil, ", atomosPackage.Ident("ErrAtomCallNotExists"), " }")
		g.P("return reply, nil")
		g.P("}")
		g.P()
	}
}

func genAtomInterface(g *protogen.GeneratedFile, service *protogen.Service) {
	atomName := service.GoName + "Atom"
	idName := service.GoName + "Id"

	// Server struct.
	g.P("// ", atomName, " is the atomos implements of ", service.GoName, " atomos.")
	g.P("//")
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(atomName, service.Location)
	g.P("type ", atomName, " interface {")
	g.P(atomosPackage.Ident("Atom"))
	for _, method := range service.Methods {
		g.Annotate(atomName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		methodSign(g, method)
	}
	g.P("}")
	g.P()

	// Spawn
	g.P("func Spawn", service.GoName, "(c *", atomosPackage.Ident("Cosmos"), ", name string, atom ", atomName, ") (",
		idName, ", error) {")
	g.P("ca, err := c.SpawnAtom(&", descName(service.GoName), ", name, atom)")
	g.P("if err != nil { return nil, err }")
	g.P("if c, ok := ca.(", idName, "); ok { return c, nil }")
	g.P("return nil, ", atomosPackage.Ident("ErrCustomizeAtomType"))
	g.P("}")
}

func genDesc(file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	idName := service.GoName + "Id"
	atomosType := service.GoName + "Atom"
	g.P()
	g.P("var ", descName(service.GoName), " ", atomosPackage.Ident("AtomTypeDesc"), " = ", atomosPackage.Ident("AtomTypeDesc"), " {")
	g.P("Name: \"", file.GoPackageName, ".", service.GoName, "\",")
	g.P("NewId: func(c ", atomosPackage.Ident("CosmosNode"), ", name string) ", atomosPackage.Ident("Id"), " {")
	g.P("return &", noExport(idName), "{c, \"", file.GoPackageName, ".", service.GoName, "\", name}")
	g.P("},")
	g.P("Calls: []", atomosPackage.Ident("CallDesc"), "{")
	for _, call := range service.Methods {
		g.P("{")
		g.P("Name: \"", call.GoName, "\",")
		g.P("Func: func(from ", atomosPackage.Ident("Id"),
			", to ", atomosPackage.Ident("Atom"), ", in ", protobufPackage.Ident("Message"),
			") (", protobufPackage.Ident("Message"), ", error) {")
		g.P("req, ok := in.(*", call.Input.GoIdent, ")")
		g.P("if !ok { return nil, ", atomosPackage.Ident("ErrAtomTypeNotExists"), " }")
		g.P("a, ok := to.(", atomosType, ")")
		g.P("if !ok { return nil, ", atomosPackage.Ident("ErrAtomTypeNotExists"), " }")
		g.P("return a.", call.GoName, "(from, req)")
		g.P("},")
		g.P("ArgDec: func(buf []byte) (", protobufPackage.Ident("Message"), ", error) {")
		g.P("r := &", call.Input.GoIdent, "{}")
		g.P("return r, ", protobufPackage.Ident("Unmarshal"), "(buf, r)")
		g.P("},")
		g.P("ReplyDec: func(buf []byte) (",  protobufPackage.Ident("Message"), ", error) {")
		g.P("r := &", call.Output.GoIdent, "{}")
		g.P("return r, ",  protobufPackage.Ident("Unmarshal"), "(buf, r)")
		g.P("},")
		g.P("},")
	}
	g.P("},")
	g.P("}")
}

const deprecationComment = "// Deprecated: Do not use."

func methodSign(g *protogen.GeneratedFile, method *protogen.Method) {
	g.P(method.GoName + "(from ", atomosPackage.Ident("Id"),
		", in *", g.QualifiedGoIdent(method.Input.GoIdent),
		") (*", g.QualifiedGoIdent(method.Output.GoIdent), ", error)")
}

func noExport(s string) string {
	return strings.ToLower(s[:1]) + s[1:]
}

func descName(s string) string {
	return s + "Desc"
}
