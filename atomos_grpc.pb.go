// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: atomos.proto

package go_atomos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AtomosRemoteService_TryKilling_FullMethodName          = "/atomos.AtomosRemoteService/TryKilling"
	AtomosRemoteService_ScaleGetAtomID_FullMethodName      = "/atomos.AtomosRemoteService/ScaleGetAtomID"
	AtomosRemoteService_GetAtomID_FullMethodName           = "/atomos.AtomosRemoteService/GetAtomID"
	AtomosRemoteService_GetIDState_FullMethodName          = "/atomos.AtomosRemoteService/GetIDState"
	AtomosRemoteService_GetIDIdleTime_FullMethodName       = "/atomos.AtomosRemoteService/GetIDIdleTime"
	AtomosRemoteService_GetElementInfo_FullMethodName      = "/atomos.AtomosRemoteService/GetElementInfo"
	AtomosRemoteService_SpawnAtom_FullMethodName           = "/atomos.AtomosRemoteService/SpawnAtom"
	AtomosRemoteService_SyncMessagingByName_FullMethodName = "/atomos.AtomosRemoteService/SyncMessagingByName"
	AtomosRemoteService_KillAtom_FullMethodName            = "/atomos.AtomosRemoteService/KillAtom"
	AtomosRemoteService_ElementBroadcast_FullMethodName    = "/atomos.AtomosRemoteService/ElementBroadcast"
)

// AtomosRemoteServiceClient is the client API for AtomosRemoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtomosRemoteServiceClient interface {
	TryKilling(ctx context.Context, in *CosmosRemoteTryKillingReq, opts ...grpc.CallOption) (*CosmosRemoteTryKillingRsp, error)
	ScaleGetAtomID(ctx context.Context, in *CosmosRemoteScaleGetAtomIDReq, opts ...grpc.CallOption) (*CosmosRemoteScaleGetAtomIDRsp, error)
	GetAtomID(ctx context.Context, in *CosmosRemoteGetAtomIDReq, opts ...grpc.CallOption) (*CosmosRemoteGetAtomIDRsp, error)
	GetIDState(ctx context.Context, in *CosmosRemoteGetIDStateReq, opts ...grpc.CallOption) (*CosmosRemoteGetIDStateRsp, error)
	GetIDIdleTime(ctx context.Context, in *CosmosRemoteGetIDIdleTimeReq, opts ...grpc.CallOption) (*CosmosRemoteGetIDIdleTimeRsp, error)
	GetElementInfo(ctx context.Context, in *CosmosRemoteGetElementInfoReq, opts ...grpc.CallOption) (*CosmosRemoteGetElementInfoRsp, error)
	SpawnAtom(ctx context.Context, in *CosmosRemoteSpawnAtomReq, opts ...grpc.CallOption) (*CosmosRemoteSpawnAtomRsp, error)
	SyncMessagingByName(ctx context.Context, in *CosmosRemoteSyncMessagingByNameReq, opts ...grpc.CallOption) (*CosmosRemoteSyncMessagingByNameRsp, error)
	KillAtom(ctx context.Context, in *CosmosRemoteKillAtomReq, opts ...grpc.CallOption) (*CosmosRemoteKillAtomRsp, error)
	ElementBroadcast(ctx context.Context, in *CosmosRemoteElementBroadcastReq, opts ...grpc.CallOption) (*CosmosRemoteElementBroadcastRsp, error)
}

type atomosRemoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAtomosRemoteServiceClient(cc grpc.ClientConnInterface) AtomosRemoteServiceClient {
	return &atomosRemoteServiceClient{cc}
}

func (c *atomosRemoteServiceClient) TryKilling(ctx context.Context, in *CosmosRemoteTryKillingReq, opts ...grpc.CallOption) (*CosmosRemoteTryKillingRsp, error) {
	out := new(CosmosRemoteTryKillingRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_TryKilling_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) ScaleGetAtomID(ctx context.Context, in *CosmosRemoteScaleGetAtomIDReq, opts ...grpc.CallOption) (*CosmosRemoteScaleGetAtomIDRsp, error) {
	out := new(CosmosRemoteScaleGetAtomIDRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_ScaleGetAtomID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) GetAtomID(ctx context.Context, in *CosmosRemoteGetAtomIDReq, opts ...grpc.CallOption) (*CosmosRemoteGetAtomIDRsp, error) {
	out := new(CosmosRemoteGetAtomIDRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_GetAtomID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) GetIDState(ctx context.Context, in *CosmosRemoteGetIDStateReq, opts ...grpc.CallOption) (*CosmosRemoteGetIDStateRsp, error) {
	out := new(CosmosRemoteGetIDStateRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_GetIDState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) GetIDIdleTime(ctx context.Context, in *CosmosRemoteGetIDIdleTimeReq, opts ...grpc.CallOption) (*CosmosRemoteGetIDIdleTimeRsp, error) {
	out := new(CosmosRemoteGetIDIdleTimeRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_GetIDIdleTime_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) GetElementInfo(ctx context.Context, in *CosmosRemoteGetElementInfoReq, opts ...grpc.CallOption) (*CosmosRemoteGetElementInfoRsp, error) {
	out := new(CosmosRemoteGetElementInfoRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_GetElementInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) SpawnAtom(ctx context.Context, in *CosmosRemoteSpawnAtomReq, opts ...grpc.CallOption) (*CosmosRemoteSpawnAtomRsp, error) {
	out := new(CosmosRemoteSpawnAtomRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_SpawnAtom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) SyncMessagingByName(ctx context.Context, in *CosmosRemoteSyncMessagingByNameReq, opts ...grpc.CallOption) (*CosmosRemoteSyncMessagingByNameRsp, error) {
	out := new(CosmosRemoteSyncMessagingByNameRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_SyncMessagingByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) KillAtom(ctx context.Context, in *CosmosRemoteKillAtomReq, opts ...grpc.CallOption) (*CosmosRemoteKillAtomRsp, error) {
	out := new(CosmosRemoteKillAtomRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_KillAtom_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *atomosRemoteServiceClient) ElementBroadcast(ctx context.Context, in *CosmosRemoteElementBroadcastReq, opts ...grpc.CallOption) (*CosmosRemoteElementBroadcastRsp, error) {
	out := new(CosmosRemoteElementBroadcastRsp)
	err := c.cc.Invoke(ctx, AtomosRemoteService_ElementBroadcast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AtomosRemoteServiceServer is the server API for AtomosRemoteService service.
// All implementations must embed UnimplementedAtomosRemoteServiceServer
// for forward compatibility
type AtomosRemoteServiceServer interface {
	TryKilling(context.Context, *CosmosRemoteTryKillingReq) (*CosmosRemoteTryKillingRsp, error)
	ScaleGetAtomID(context.Context, *CosmosRemoteScaleGetAtomIDReq) (*CosmosRemoteScaleGetAtomIDRsp, error)
	GetAtomID(context.Context, *CosmosRemoteGetAtomIDReq) (*CosmosRemoteGetAtomIDRsp, error)
	GetIDState(context.Context, *CosmosRemoteGetIDStateReq) (*CosmosRemoteGetIDStateRsp, error)
	GetIDIdleTime(context.Context, *CosmosRemoteGetIDIdleTimeReq) (*CosmosRemoteGetIDIdleTimeRsp, error)
	GetElementInfo(context.Context, *CosmosRemoteGetElementInfoReq) (*CosmosRemoteGetElementInfoRsp, error)
	SpawnAtom(context.Context, *CosmosRemoteSpawnAtomReq) (*CosmosRemoteSpawnAtomRsp, error)
	SyncMessagingByName(context.Context, *CosmosRemoteSyncMessagingByNameReq) (*CosmosRemoteSyncMessagingByNameRsp, error)
	KillAtom(context.Context, *CosmosRemoteKillAtomReq) (*CosmosRemoteKillAtomRsp, error)
	ElementBroadcast(context.Context, *CosmosRemoteElementBroadcastReq) (*CosmosRemoteElementBroadcastRsp, error)
	mustEmbedUnimplementedAtomosRemoteServiceServer()
}

// UnimplementedAtomosRemoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAtomosRemoteServiceServer struct {
}

func (UnimplementedAtomosRemoteServiceServer) TryKilling(context.Context, *CosmosRemoteTryKillingReq) (*CosmosRemoteTryKillingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TryKilling not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) ScaleGetAtomID(context.Context, *CosmosRemoteScaleGetAtomIDReq) (*CosmosRemoteScaleGetAtomIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScaleGetAtomID not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) GetAtomID(context.Context, *CosmosRemoteGetAtomIDReq) (*CosmosRemoteGetAtomIDRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAtomID not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) GetIDState(context.Context, *CosmosRemoteGetIDStateReq) (*CosmosRemoteGetIDStateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDState not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) GetIDIdleTime(context.Context, *CosmosRemoteGetIDIdleTimeReq) (*CosmosRemoteGetIDIdleTimeRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIDIdleTime not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) GetElementInfo(context.Context, *CosmosRemoteGetElementInfoReq) (*CosmosRemoteGetElementInfoRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElementInfo not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) SpawnAtom(context.Context, *CosmosRemoteSpawnAtomReq) (*CosmosRemoteSpawnAtomRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpawnAtom not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) SyncMessagingByName(context.Context, *CosmosRemoteSyncMessagingByNameReq) (*CosmosRemoteSyncMessagingByNameRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMessagingByName not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) KillAtom(context.Context, *CosmosRemoteKillAtomReq) (*CosmosRemoteKillAtomRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillAtom not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) ElementBroadcast(context.Context, *CosmosRemoteElementBroadcastReq) (*CosmosRemoteElementBroadcastRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElementBroadcast not implemented")
}
func (UnimplementedAtomosRemoteServiceServer) mustEmbedUnimplementedAtomosRemoteServiceServer() {}

// UnsafeAtomosRemoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtomosRemoteServiceServer will
// result in compilation errors.
type UnsafeAtomosRemoteServiceServer interface {
	mustEmbedUnimplementedAtomosRemoteServiceServer()
}

func RegisterAtomosRemoteServiceServer(s grpc.ServiceRegistrar, srv AtomosRemoteServiceServer) {
	s.RegisterService(&AtomosRemoteService_ServiceDesc, srv)
}

func _AtomosRemoteService_TryKilling_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteTryKillingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).TryKilling(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_TryKilling_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).TryKilling(ctx, req.(*CosmosRemoteTryKillingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_ScaleGetAtomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteScaleGetAtomIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).ScaleGetAtomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_ScaleGetAtomID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).ScaleGetAtomID(ctx, req.(*CosmosRemoteScaleGetAtomIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_GetAtomID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteGetAtomIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).GetAtomID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_GetAtomID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).GetAtomID(ctx, req.(*CosmosRemoteGetAtomIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_GetIDState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteGetIDStateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).GetIDState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_GetIDState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).GetIDState(ctx, req.(*CosmosRemoteGetIDStateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_GetIDIdleTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteGetIDIdleTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).GetIDIdleTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_GetIDIdleTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).GetIDIdleTime(ctx, req.(*CosmosRemoteGetIDIdleTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_GetElementInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteGetElementInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).GetElementInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_GetElementInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).GetElementInfo(ctx, req.(*CosmosRemoteGetElementInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_SpawnAtom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteSpawnAtomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).SpawnAtom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_SpawnAtom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).SpawnAtom(ctx, req.(*CosmosRemoteSpawnAtomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_SyncMessagingByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteSyncMessagingByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).SyncMessagingByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_SyncMessagingByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).SyncMessagingByName(ctx, req.(*CosmosRemoteSyncMessagingByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_KillAtom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteKillAtomReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).KillAtom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_KillAtom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).KillAtom(ctx, req.(*CosmosRemoteKillAtomReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AtomosRemoteService_ElementBroadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CosmosRemoteElementBroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AtomosRemoteServiceServer).ElementBroadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AtomosRemoteService_ElementBroadcast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AtomosRemoteServiceServer).ElementBroadcast(ctx, req.(*CosmosRemoteElementBroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AtomosRemoteService_ServiceDesc is the grpc.ServiceDesc for AtomosRemoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AtomosRemoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "atomos.AtomosRemoteService",
	HandlerType: (*AtomosRemoteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TryKilling",
			Handler:    _AtomosRemoteService_TryKilling_Handler,
		},
		{
			MethodName: "ScaleGetAtomID",
			Handler:    _AtomosRemoteService_ScaleGetAtomID_Handler,
		},
		{
			MethodName: "GetAtomID",
			Handler:    _AtomosRemoteService_GetAtomID_Handler,
		},
		{
			MethodName: "GetIDState",
			Handler:    _AtomosRemoteService_GetIDState_Handler,
		},
		{
			MethodName: "GetIDIdleTime",
			Handler:    _AtomosRemoteService_GetIDIdleTime_Handler,
		},
		{
			MethodName: "GetElementInfo",
			Handler:    _AtomosRemoteService_GetElementInfo_Handler,
		},
		{
			MethodName: "SpawnAtom",
			Handler:    _AtomosRemoteService_SpawnAtom_Handler,
		},
		{
			MethodName: "SyncMessagingByName",
			Handler:    _AtomosRemoteService_SyncMessagingByName_Handler,
		},
		{
			MethodName: "KillAtom",
			Handler:    _AtomosRemoteService_KillAtom_Handler,
		},
		{
			MethodName: "ElementBroadcast",
			Handler:    _AtomosRemoteService_ElementBroadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "atomos.proto",
}
